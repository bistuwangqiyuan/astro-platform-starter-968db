---
// 历史记录页面 - AIKeyword项目
import BaseLayout from '@/layouts/BaseLayout.astro';
import Header from '@/components/layout/Header.astro';
import Footer from '@/components/layout/Footer.astro';
import Button from '@/components/ui/Button.astro';
import Input from '@/components/ui/Input.astro';
import Table from '@/components/ui/Table.astro';

const title = '分析历史 - AIKeyword';
const description = '查看您的关键词分析历史记录，管理和导出分析数据。';
---

<BaseLayout title={title} description={description}>
    <Header slot="header" />

    <main class="min-h-screen bg-gray-50">
        <!-- 页面标题 -->
        <section class="bg-white border-b border-gray-200">
            <div class="container py-8">
                <div class="flex flex-col lg:flex-row lg:items-center lg:justify-between">
                    <div>
                        <h1 class="text-2xl sm:text-3xl font-bold text-gray-900">分析历史</h1>
                        <p class="mt-2 text-gray-600">管理您的关键词分析记录</p>
                    </div>
                    <div class="mt-4 lg:mt-0 flex space-x-3">
                        <Button variant="outline" size="sm" id="export-button">
                            <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path
                                    stroke-linecap="round"
                                    stroke-linejoin="round"
                                    stroke-width="2"
                                    d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"
                                ></path>
                            </svg>
                            导出数据
                        </Button>
                        <Button variant="outline" size="sm" id="delete-selected-button" className="text-error-600 border-error-300 hover:bg-error-50">
                            <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path
                                    stroke-linecap="round"
                                    stroke-linejoin="round"
                                    stroke-width="2"
                                    d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"
                                ></path>
                            </svg>
                            删除选中
                        </Button>
                    </div>
                </div>
            </div>
        </section>

        <!-- 筛选区域 -->
        <section class="bg-white">
            <div class="container py-6">
                <form id="filter-form" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-4">
                    <!-- 关键词搜索 -->
                    <div>
                        <label class="form-label">搜索关键词</label>
                        <Input type="search" id="keyword-filter" placeholder="输入关键词..." size="sm" />
                    </div>

                    <!-- 开始日期 -->
                    <div>
                        <label class="form-label">开始日期</label>
                        <Input type="date" id="date-from" size="sm" />
                    </div>

                    <!-- 结束日期 -->
                    <div>
                        <label class="form-label">结束日期</label>
                        <Input type="date" id="date-to" size="sm" />
                    </div>

                    <!-- 数据源筛选 -->
                    <div>
                        <label class="form-label">数据源</label>
                        <select id="source-filter" class="form-select text-sm">
                            <option value="">全部来源</option>
                            <option value="google">Google</option>
                            <option value="baidu">百度</option>
                            <option value="mock">模拟数据</option>
                        </select>
                    </div>

                    <!-- 搜索按钮 -->
                    <div class="flex items-end">
                        <Button type="submit" variant="primary" size="sm" className="w-full">搜索</Button>
                    </div>
                </form>
            </div>
        </section>

        <!-- 结果区域 -->
        <section class="container py-8">
            <!-- 加载状态 -->
            <div id="loading-state" class="text-center py-16">
                <div class="inline-flex items-center justify-center w-12 h-12 bg-primary-100 rounded-full mb-4">
                    <svg class="animate-spin w-6 h-6 text-primary-600" fill="none" viewBox="0 0 24 24">
                        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                        <path
                            class="opacity-75"
                            fill="currentColor"
                            d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                    </svg>
                </div>
                <p class="text-gray-600">正在加载历史记录...</p>
            </div>

            <!-- 错误状态 -->
            <div id="error-state" class="hidden text-center py-16">
                <div class="inline-flex items-center justify-center w-12 h-12 bg-error-100 rounded-full mb-4">
                    <svg class="w-6 h-6 text-error-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                    </svg>
                </div>
                <h3 class="text-lg font-semibold text-gray-900 mb-2">加载失败</h3>
                <p class="text-gray-600 mb-4" id="error-message">请稍后重试</p>
                <Button onclick="loadHistory()" variant="outline">重新加载</Button>
            </div>

            <!-- 空状态 -->
            <div id="empty-state" class="hidden text-center py-16">
                <div class="inline-flex items-center justify-center w-12 h-12 bg-gray-100 rounded-full mb-4">
                    <svg class="w-6 h-6 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path
                            stroke-linecap="round"
                            stroke-linejoin="round"
                            stroke-width="2"
                            d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                    </svg>
                </div>
                <h3 class="text-lg font-semibold text-gray-900 mb-2">暂无历史记录</h3>
                <p class="text-gray-600 mb-4">您还没有进行过关键词分析</p>
                <Button href="/analyze" variant="primary">开始分析</Button>
            </div>

            <!-- 历史记录表格 -->
            <div id="history-table" class="hidden">
                <div class="bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden">
                    <div class="px-6 py-4 border-b border-gray-200 flex items-center justify-between">
                        <div class="flex items-center space-x-4">
                            <label class="flex items-center">
                                <input type="checkbox" id="select-all" class="mr-2 h-4 w-4 text-primary-600 border-gray-300 rounded" />
                                <span class="text-sm text-gray-600">全选</span>
                            </label>
                            <span id="selected-count" class="text-sm text-gray-500">已选择 0 项</span>
                        </div>
                        <div class="flex items-center space-x-4">
                            <span id="total-count" class="text-sm text-gray-500">共 0 条记录</span>
                        </div>
                    </div>

                    <div class="overflow-x-auto">
                        <table class="table">
                            <thead>
                                <tr>
                                    <th class="w-12">
                                        <span class="sr-only">选择</span>
                                    </th>
                                    <th class="cursor-pointer hover:bg-gray-100" data-sort="keyword">
                                        关键词
                                        <svg class="w-4 h-4 ml-1 inline" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path
                                                stroke-linecap="round"
                                                stroke-linejoin="round"
                                                stroke-width="2"
                                                d="M7 16V4m0 0L3 8m4-4l4 4m6 0v12m0 0l4-4m-4 4l-4-4"></path>
                                        </svg>
                                    </th>
                                    <th class="cursor-pointer hover:bg-gray-100" data-sort="analysis_date">
                                        分析时间
                                        <svg class="w-4 h-4 ml-1 inline" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path
                                                stroke-linecap="round"
                                                stroke-linejoin="round"
                                                stroke-width="2"
                                                d="M7 16V4m0 0L3 8m4-4l4 4m6 0v12m0 0l4-4m-4 4l-4-4"></path>
                                        </svg>
                                    </th>
                                    <th>月搜索量</th>
                                    <th>竞争度</th>
                                    <th>数据源</th>
                                    <th>状态</th>
                                    <th>操作</th>
                                </tr>
                            </thead>
                            <tbody id="history-tbody">
                                <!-- 数据将通过JavaScript填充 -->
                            </tbody>
                        </table>
                    </div>

                    <!-- 分页控件 -->
                    <div class="px-6 py-4 border-t border-gray-200">
                        <div class="flex items-center justify-between">
                            <div class="flex items-center space-x-2">
                                <span class="text-sm text-gray-700">每页显示</span>
                                <select id="page-size" class="form-select text-sm">
                                    <option value="10">10</option>
                                    <option value="20" selected>20</option>
                                    <option value="50">50</option>
                                    <option value="100">100</option>
                                </select>
                                <span class="text-sm text-gray-700">条</span>
                            </div>

                            <div class="flex items-center space-x-2">
                                <Button variant="outline" size="sm" id="prev-page" disabled>上一页</Button>
                                <span id="page-info" class="text-sm text-gray-700">第 1 页，共 1 页</span>
                                <Button variant="outline" size="sm" id="next-page" disabled>下一页</Button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </section>
    </main>

    <Footer slot="footer" />
</BaseLayout>

<script>
    // 历史记录页面功能
    document.addEventListener('DOMContentLoaded', () => {
        window.logKeyStep('历史记录页面加载完成');
        initializeHistoryPage();
    });

    // 全局状态
    let currentPage = 1;
    let pageSize = 20;
    let totalPages = 1;
    let selectedRecords = new Set();
    let allRecords: any[] = [];
    let currentFilters = {};

    function initializeHistoryPage() {
        // 绑定事件
        bindEvents();

        // 检查登录状态
        checkAuthAndLoad();

        window.logKeyStep('历史记录页面初始化完成');
    }

    function bindEvents() {
        // 筛选表单
        const filterForm = document.getElementById('filter-form');
        filterForm?.addEventListener('submit', (e) => {
            e.preventDefault();
            currentPage = 1;
            loadHistory();
        });

        // 全选复选框
        const selectAllCheckbox = document.getElementById('select-all') as HTMLInputElement;
        selectAllCheckbox?.addEventListener('change', () => {
            toggleSelectAll(selectAllCheckbox.checked);
        });

        // 导出按钮
        const exportButton = document.getElementById('export-button');
        exportButton?.addEventListener('click', () => {
            exportData();
        });

        // 删除按钮
        const deleteButton = document.getElementById('delete-selected-button');
        deleteButton?.addEventListener('click', () => {
            deleteSelectedRecords();
        });

        // 分页按钮
        const prevButton = document.getElementById('prev-page');
        const nextButton = document.getElementById('next-page');

        prevButton?.addEventListener('click', () => {
            if (currentPage > 1) {
                currentPage--;
                loadHistory();
            }
        });

        nextButton?.addEventListener('click', () => {
            if (currentPage < totalPages) {
                currentPage++;
                loadHistory();
            }
        });

        // 页面大小选择
        const pageSizeSelect = document.getElementById('page-size') as HTMLSelectElement;
        pageSizeSelect?.addEventListener('change', () => {
            pageSize = parseInt(pageSizeSelect.value);
            currentPage = 1;
            loadHistory();
        });

        // 表格排序
        const sortableHeaders = document.querySelectorAll('[data-sort]');
        sortableHeaders.forEach((header) => {
            header.addEventListener('click', () => {
                const sortField = header.getAttribute('data-sort');
                if (sortField) {
                    sortTable(sortField);
                }
            });
        });
    }

    async function checkAuthAndLoad() {
        try {
            const response = await fetch('/api/auth/login', {
                method: 'GET'
            });

            if (response.ok) {
                const result = await response.json();
                if (result.success && result.user) {
                    // 用户已登录，加载历史记录
                    loadHistory();
                } else {
                    // 用户未登录，跳转到登录页
                    window.location.href = '/auth/login?redirect=' + encodeURIComponent(window.location.pathname);
                }
            } else {
                // 认证失败
                window.location.href = '/auth/login?redirect=' + encodeURIComponent(window.location.pathname);
            }
        } catch (error) {
            console.error('[HISTORY] 检查认证状态失败:', error);
            showErrorState('网络错误，请检查连接');
        }
    }

    async function loadHistory() {
        try {
            window.logKeyStep('开始加载历史记录', { page: currentPage, pageSize });

            showLoadingState();

            // 获取筛选条件
            const filters = getFilters();
            currentFilters = filters;

            const params = new URLSearchParams({
                page: currentPage.toString(),
                limit: pageSize.toString(),
                ...filters
            });

            const response = await fetch(`/api/history?${params}`, {
                method: 'GET'
            });

            const result = await response.json();

            if (result.success && result.data) {
                allRecords = result.data.records;
                const pagination = result.data.pagination;

                totalPages = pagination.totalPages;

                // 更新UI
                displayHistoryTable(allRecords);
                updatePagination(pagination);
                updateSelectedCount();

                window.logKeyStep('历史记录加载完成', {
                    recordCount: allRecords.length,
                    total: pagination.total
                });
            } else {
                const errorMsg = result.error || '加载历史记录失败';
                window.logKeyStep('历史记录加载失败', { error: errorMsg });

                if (result.error?.includes('未登录') || result.error?.includes('登录已过期')) {
                    window.location.href = '/auth/login?redirect=' + encodeURIComponent(window.location.pathname);
                    return;
                }

                showErrorState(errorMsg);
            }
        } catch (error) {
            console.error('[HISTORY] 加载历史记录失败:', error);
            window.logKeyStep('历史记录加载异常', error);
            showErrorState('网络错误，请重试');
        }
    }

    function getFilters() {
        const keyword = (document.getElementById('keyword-filter') as HTMLInputElement)?.value.trim();
        const dateFrom = (document.getElementById('date-from') as HTMLInputElement)?.value;
        const dateTo = (document.getElementById('date-to') as HTMLInputElement)?.value;
        const source = (document.getElementById('source-filter') as HTMLSelectElement)?.value;

        const filters: any = {};

        if (keyword) filters.keyword = keyword;
        if (dateFrom) filters.dateFrom = dateFrom;
        if (dateTo) filters.dateTo = dateTo;
        if (source) filters.source = source;

        return filters;
    }

    function displayHistoryTable(records: any[]) {
        const tbody = document.getElementById('history-tbody');
        if (!tbody) return;

        if (records.length === 0) {
            showEmptyState();
            return;
        }

        showHistoryTable();

        tbody.innerHTML = records
            .map((record) => {
                const analysisDate = new Date(record.analysis_date).toLocaleString('zh-CN');
                const searchVolume = record.results?.searchVolume?.monthly || '--';
                const competition = record.results?.competition?.score ? `${record.results.competition.score}/100` : '--';
                const statusClass =
                    record.status === 'completed'
                        ? 'bg-accent-100 text-accent-800'
                        : record.status === 'failed'
                          ? 'bg-error-100 text-error-800'
                          : 'bg-warning-100 text-warning-800';
                const statusText = record.status === 'completed' ? '已完成' : record.status === 'failed' ? '失败' : '处理中';

                return `
                <tr class="hover:bg-gray-50">
                    <td>
                        <input type="checkbox" class="record-checkbox h-4 w-4 text-primary-600 border-gray-300 rounded" 
                               data-id="${record.id}" ${selectedRecords.has(record.id) ? 'checked' : ''}>
                    </td>
                    <td class="font-medium text-gray-900">${record.keyword}</td>
                    <td class="text-gray-600">${analysisDate}</td>
                    <td class="text-gray-900">${typeof searchVolume === 'number' ? searchVolume.toLocaleString() : searchVolume}</td>
                    <td class="text-gray-900">${competition}</td>
                    <td class="text-gray-600">${record.source || '--'}</td>
                    <td>
                        <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${statusClass}">
                            ${statusText}
                        </span>
                    </td>
                    <td>
                        <div class="flex items-center space-x-2">
                            <button onclick="viewRecord('${record.id}')" class="text-primary-600 hover:text-primary-900 text-sm">
                                查看
                            </button>
                            <button onclick="reanalyze('${record.keyword}')" class="text-accent-600 hover:text-accent-900 text-sm">
                                重新分析
                            </button>
                            <button onclick="deleteRecord('${record.id}')" class="text-error-600 hover:text-error-900 text-sm">
                                删除
                            </button>
                        </div>
                    </td>
                </tr>
            `;
            })
            .join('');

        // 绑定复选框事件
        const checkboxes = tbody.querySelectorAll('.record-checkbox');
        checkboxes.forEach((checkbox) => {
            checkbox.addEventListener('change', (e) => {
                const target = e.target as HTMLInputElement;
                const recordId = target.getAttribute('data-id');
                if (recordId) {
                    if (target.checked) {
                        selectedRecords.add(recordId);
                    } else {
                        selectedRecords.delete(recordId);
                    }
                    updateSelectedCount();
                }
            });
        });

        // 更新总数
        updateTotalCount(records.length);
    }

    function updatePagination(pagination: any) {
        const pageInfo = document.getElementById('page-info');
        const prevButton = document.getElementById('prev-page') as HTMLButtonElement;
        const nextButton = document.getElementById('next-page') as HTMLButtonElement;

        if (pageInfo) {
            pageInfo.textContent = `第 ${pagination.page} 页，共 ${pagination.totalPages} 页`;
        }

        if (prevButton) {
            prevButton.disabled = !pagination.hasPrev;
        }

        if (nextButton) {
            nextButton.disabled = !pagination.hasNext;
        }
    }

    function updateSelectedCount() {
        const countElement = document.getElementById('selected-count');
        if (countElement) {
            countElement.textContent = `已选择 ${selectedRecords.size} 项`;
        }

        // 更新全选复选框状态
        const selectAllCheckbox = document.getElementById('select-all') as HTMLInputElement;
        if (selectAllCheckbox) {
            selectAllCheckbox.checked = selectedRecords.size > 0 && selectedRecords.size === allRecords.length;
            selectAllCheckbox.indeterminate = selectedRecords.size > 0 && selectedRecords.size < allRecords.length;
        }
    }

    function updateTotalCount(count: number) {
        const totalElement = document.getElementById('total-count');
        if (totalElement) {
            totalElement.textContent = `共 ${count} 条记录`;
        }
    }

    function toggleSelectAll(checked: boolean) {
        if (checked) {
            allRecords.forEach((record) => selectedRecords.add(record.id));
        } else {
            selectedRecords.clear();
        }

        // 更新复选框状态
        const checkboxes = document.querySelectorAll('.record-checkbox') as NodeListOf<HTMLInputElement>;
        checkboxes.forEach((checkbox) => {
            checkbox.checked = checked;
        });

        updateSelectedCount();
    }

    function showLoadingState() {
        hideAllStates();
        document.getElementById('loading-state')?.classList.remove('hidden');
    }

    function showErrorState(message: string) {
        hideAllStates();
        const errorState = document.getElementById('error-state');
        const errorMessage = document.getElementById('error-message');

        if (errorState && errorMessage) {
            errorMessage.textContent = message;
            errorState.classList.remove('hidden');
        }
    }

    function showEmptyState() {
        hideAllStates();
        document.getElementById('empty-state')?.classList.remove('hidden');
    }

    function showHistoryTable() {
        hideAllStates();
        document.getElementById('history-table')?.classList.remove('hidden');
    }

    function hideAllStates() {
        ['loading-state', 'error-state', 'empty-state', 'history-table'].forEach((id) => {
            document.getElementById(id)?.classList.add('hidden');
        });
    }

    function sortTable(field: string) {
        // TODO: 实现表格排序
        window.logKeyStep('表格排序', { field });
    }

    async function exportData() {
        try {
            window.logKeyStep('开始导出数据', { selectedCount: selectedRecords.size });

            const format = prompt('请选择导出格式:\n1. JSON\n2. CSV\n\n输入 1 或 2:', '1');
            if (!format || (format !== '1' && format !== '2')) {
                return;
            }

            const exportFormat = format === '1' ? 'json' : 'csv';
            const exportIds = selectedRecords.size > 0 ? Array.from(selectedRecords) : null;

            const response = await fetch('/api/history', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    ids: exportIds,
                    format: exportFormat
                })
            });

            if (response.ok) {
                // 触发下载
                const blob = await response.blob();
                const url = window.URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = response.headers.get('Content-Disposition')?.split('filename=')[1]?.replace(/"/g, '') || `keyword-history.${exportFormat}`;
                document.body.appendChild(a);
                a.click();
                document.body.removeChild(a);
                window.URL.revokeObjectURL(url);

                window.logKeyStep('数据导出成功', { format: exportFormat });

                if (window.utils) {
                    window.utils.showToast('数据导出成功', 'success');
                }
            } else {
                const result = await response.json();
                throw new Error(result.error || '导出失败');
            }
        } catch (error) {
            console.error('[HISTORY] 导出失败:', error);
            window.logKeyStep('数据导出失败', error);

            if (window.utils) {
                window.utils.showToast('导出失败: ' + (error as Error).message, 'error');
            }
        }
    }

    async function deleteSelectedRecords() {
        if (selectedRecords.size === 0) {
            if (window.utils) {
                window.utils.showToast('请先选择要删除的记录', 'warning');
            }
            return;
        }

        const confirmed = confirm(`确定要删除选中的 ${selectedRecords.size} 条记录吗？此操作不可恢复。`);
        if (!confirmed) return;

        try {
            window.logKeyStep('开始删除记录', { count: selectedRecords.size });

            const response = await fetch('/api/history', {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    ids: Array.from(selectedRecords)
                })
            });

            const result = await response.json();

            if (result.success) {
                window.logKeyStep('记录删除成功');

                if (window.utils) {
                    window.utils.showToast(result.message || '删除成功', 'success');
                }

                // 清空选择
                selectedRecords.clear();

                // 重新加载数据
                loadHistory();
            } else {
                throw new Error(result.error || '删除失败');
            }
        } catch (error) {
            console.error('[HISTORY] 删除失败:', error);
            window.logKeyStep('记录删除失败', error);

            if (window.utils) {
                window.utils.showToast('删除失败: ' + (error as Error).message, 'error');
            }
        }
    }

    function viewRecord(recordId: string) {
        const record = allRecords.find((r) => r.id === recordId);
        if (record) {
            window.logKeyStep('查看分析记录', { recordId, keyword: record.keyword });
            // 跳转到分析页面并传递记录信息
            window.location.href = `/analyze?keyword=${encodeURIComponent(record.keyword)}&recordId=${recordId}`;
        }
    }

    function reanalyze(keyword: string) {
        window.logKeyStep('重新分析关键词', { keyword });
        window.location.href = `/analyze?keyword=${encodeURIComponent(keyword)}`;
    }

    async function deleteRecord(recordId: string) {
        const confirmed = confirm('确定要删除这条记录吗？此操作不可恢复。');
        if (!confirmed) return;

        try {
            selectedRecords.clear();
            selectedRecords.add(recordId);
            await deleteSelectedRecords();
        } catch (error) {
            console.error('[HISTORY] 删除单条记录失败:', error);
        }
    }

    // 全局函数
    (window as any).viewRecord = viewRecord;
    (window as any).reanalyze = reanalyze;
    (window as any).deleteRecord = deleteRecord;
    (window as any).loadHistory = loadHistory;
</script>

<style>
    /* 历史记录页面样式 */
    .table th {
        position: sticky;
        top: 0;
        z-index: 10;
    }

    .record-checkbox:indeterminate {
        background-color: #2563eb;
        border-color: #2563eb;
    }

    /* 表格悬停效果 */
    .table tbody tr:hover {
        background-color: #f8fafc;
    }

    /* 排序图标样式 */
    [data-sort] svg {
        transition: transform 0.2s ease;
    }

    [data-sort]:hover svg {
        transform: scale(1.1);
    }

    /* 分页按钮样式 */
    #prev-page:disabled,
    #next-page:disabled {
        opacity: 0.5;
        cursor: not-allowed;
    }

    /* 响应式调整 */
    @media (max-width: 768px) {
        .table {
            font-size: 0.875rem;
        }

        .table th,
        .table td {
            padding: 0.5rem 0.75rem;
        }
    }
</style>
