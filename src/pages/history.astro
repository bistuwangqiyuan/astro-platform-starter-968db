---
import BaseLayout from '../layouts/BaseLayout.astro';
import Button from '../components/ui/Button.astro';
import { getCurrentUser } from '../utils/auth';

// 确保用户已登录（中间件会处理重定向）
const user = await getCurrentUser();
---

<BaseLayout title="历史记录">
  <div class="container mx-auto px-4 py-8">
    <div class="flex justify-between items-center mb-8">
      <h1 class="text-3xl font-bold">历史记录</h1>
      <Button id="clearAllBtn" variant="danger" size="sm">
        清除所有记录
      </Button>
    </div>
    
    <!-- 过滤器 -->
    <div class="bg-white rounded-lg shadow p-4 mb-6">
      <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
        <div>
          <label for="actionFilter" class="block text-sm font-medium mb-1">
            操作类型
          </label>
          <select 
            id="actionFilter" 
            class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
          >
            <option value="">所有操作</option>
            <option value="analyze">文本分析</option>
            <option value="batch_analyze">批量分析</option>
            <option value="favorite_add">添加收藏</option>
            <option value="favorite_remove">删除收藏</option>
          </select>
        </div>
        
        <div>
          <label for="startDate" class="block text-sm font-medium mb-1">
            开始日期
          </label>
          <input 
            type="date" 
            id="startDate" 
            class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
          />
        </div>
        
        <div>
          <label for="endDate" class="block text-sm font-medium mb-1">
            结束日期
          </label>
          <input 
            type="date" 
            id="endDate" 
            class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
          />
        </div>
      </div>
      
      <div class="mt-4 flex justify-end space-x-2">
        <Button id="resetFilterBtn" variant="ghost" size="sm">
          重置
        </Button>
        <Button id="applyFilterBtn" variant="primary" size="sm">
          应用过滤
        </Button>
      </div>
    </div>
    
    <!-- 历史记录列表 -->
    <div id="historyList" class="space-y-4">
      <div class="text-center py-8">
        <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto"></div>
        <p class="text-gray-500 mt-4">加载中...</p>
      </div>
    </div>
    
    <!-- 分页控件 -->
    <div id="pagination" class="mt-8 flex justify-center space-x-2 hidden"></div>
    
    <!-- 空状态 -->
    <div id="emptyState" class="text-center py-12 hidden">
      <p class="text-gray-500 mb-4">暂无历史记录</p>
      <Button href="/analyze" variant="primary">
        去分析文本
      </Button>
    </div>
  </div>
</BaseLayout>

<script>
  // 日志函数
  const log = (message: string, data?: any) => {
    console.log(`[History] ${message}`, data || '');
  };
  
  // DOM 元素
  const historyList = document.getElementById('historyList') as HTMLDivElement;
  const pagination = document.getElementById('pagination') as HTMLDivElement;
  const emptyState = document.getElementById('emptyState') as HTMLDivElement;
  const actionFilter = document.getElementById('actionFilter') as HTMLSelectElement;
  const startDate = document.getElementById('startDate') as HTMLInputElement;
  const endDate = document.getElementById('endDate') as HTMLInputElement;
  const applyFilterBtn = document.getElementById('applyFilterBtn') as HTMLButtonElement;
  const resetFilterBtn = document.getElementById('resetFilterBtn') as HTMLButtonElement;
  const clearAllBtn = document.getElementById('clearAllBtn') as HTMLButtonElement;
  
  let currentPage = 1;
  const limit = 20;
  let currentFilters = {
    action: '',
    startDate: '',
    endDate: '',
  };
  
  // 格式化日期时间
  const formatDateTime = (dateString: string) => {
    const date = new Date(dateString);
    return date.toLocaleDateString('zh-CN', {
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit',
      second: '2-digit',
    });
  };
  
  // 渲染详情内容
  const renderDetails = (details: any) => {
    if (!details) return '';
    
    const items = [];
    
    if (details.contentLength !== undefined) {
      items.push(`文本长度：${details.contentLength} 字符`);
    }
    if (details.count !== undefined) {
      items.push(`处理数量：${details.count}`);
    }
    if (details.successCount !== undefined) {
      items.push(`成功：${details.successCount}`);
    }
    if (details.analysisId) {
      items.push(`分析ID：${details.analysisId}`);
    }
    if (details.favoriteId) {
      items.push(`收藏ID：${details.favoriteId}`);
    }
    
    return items.length > 0 ? items.join(' | ') : '';
  };
  
  // 渲染历史记录项
  const renderHistoryItem = (item: any) => {
    const detailsContent = renderDetails(item.details);
    
    return `
      <div class="bg-white rounded-lg shadow p-4">
        <div class="flex justify-between items-start">
          <div class="flex-1">
            <div class="flex items-center space-x-3">
              <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium
                ${item.action.includes('analyze') ? 'bg-blue-100 text-blue-800' : ''}
                ${item.action.includes('favorite') ? 'bg-yellow-100 text-yellow-800' : ''}
                ${item.action.includes('login') || item.action.includes('register') ? 'bg-green-100 text-green-800' : ''}
                ${item.action.includes('password') ? 'bg-purple-100 text-purple-800' : ''}
              ">
                ${item.actionLabel}
              </span>
              <span class="text-sm text-gray-500">
                ${formatDateTime(item.created_at)}
              </span>
            </div>
            ${detailsContent ? `
              <p class="text-sm text-gray-600 mt-2">${detailsContent}</p>
            ` : ''}
          </div>
        </div>
      </div>
    `;
  };
  
  // 渲染分页控件
  const renderPagination = (totalPages: number) => {
    if (totalPages <= 1) {
      pagination.classList.add('hidden');
      return;
    }
    
    pagination.classList.remove('hidden');
    pagination.innerHTML = '';
    
    // 上一页按钮
    const prevBtn = document.createElement('button');
    prevBtn.textContent = '上一页';
    prevBtn.className = 'px-4 py-2 rounded-md text-sm font-medium transition-colors';
    prevBtn.disabled = currentPage === 1;
    
    if (currentPage === 1) {
      prevBtn.className += ' bg-gray-100 text-gray-400 cursor-not-allowed';
    } else {
      prevBtn.className += ' bg-white text-gray-700 hover:bg-gray-50 border border-gray-300';
      prevBtn.onclick = () => loadHistory(currentPage - 1);
    }
    
    pagination.appendChild(prevBtn);
    
    // 页码按钮
    for (let i = 1; i <= totalPages; i++) {
      if (
        i === 1 || 
        i === totalPages || 
        (i >= currentPage - 2 && i <= currentPage + 2)
      ) {
        const pageBtn = document.createElement('button');
        pageBtn.textContent = i.toString();
        pageBtn.className = 'px-3 py-2 rounded-md text-sm font-medium transition-colors';
        
        if (i === currentPage) {
          pageBtn.className += ' bg-blue-600 text-white';
        } else {
          pageBtn.className += ' bg-white text-gray-700 hover:bg-gray-50 border border-gray-300';
          pageBtn.onclick = () => loadHistory(i);
        }
        
        pagination.appendChild(pageBtn);
      } else if (
        (i === currentPage - 3 && i > 1) || 
        (i === currentPage + 3 && i < totalPages)
      ) {
        const dots = document.createElement('span');
        dots.textContent = '...';
        dots.className = 'px-2 py-2 text-gray-500';
        pagination.appendChild(dots);
      }
    }
    
    // 下一页按钮
    const nextBtn = document.createElement('button');
    nextBtn.textContent = '下一页';
    nextBtn.className = 'px-4 py-2 rounded-md text-sm font-medium transition-colors';
    nextBtn.disabled = currentPage === totalPages;
    
    if (currentPage === totalPages) {
      nextBtn.className += ' bg-gray-100 text-gray-400 cursor-not-allowed';
    } else {
      nextBtn.className += ' bg-white text-gray-700 hover:bg-gray-50 border border-gray-300';
      nextBtn.onclick = () => loadHistory(currentPage + 1);
    }
    
    pagination.appendChild(nextBtn);
  };
  
  // 构建查询参数
  const buildQueryParams = () => {
    const params = new URLSearchParams();
    params.set('page', currentPage.toString());
    params.set('limit', limit.toString());
    
    if (currentFilters.action) {
      params.set('action', currentFilters.action);
    }
    if (currentFilters.startDate) {
      params.set('startDate', currentFilters.startDate);
    }
    if (currentFilters.endDate) {
      params.set('endDate', currentFilters.endDate);
    }
    
    return params.toString();
  };
  
  // 加载历史记录
  const loadHistory = async (page = 1) => {
    log('加载历史记录', { page, filters: currentFilters });
    currentPage = page;
    
    try {
      const response = await fetch(`/api/history?${buildQueryParams()}`);
      const data = await response.json();
      
      if (!response.ok) {
        throw new Error(data.error || '加载失败');
      }
      
      log('历史记录加载成功', data);
      
      if (data.history.length === 0 && page === 1) {
        historyList.classList.add('hidden');
        emptyState.classList.remove('hidden');
        pagination.classList.add('hidden');
      } else {
        historyList.classList.remove('hidden');
        emptyState.classList.add('hidden');
        
        historyList.innerHTML = data.history
          .map((item: any) => renderHistoryItem(item))
          .join('');
        
        renderPagination(data.pagination.totalPages);
      }
    } catch (error) {
      log('加载历史记录失败', error);
      historyList.innerHTML = `
        <div class="text-center py-8">
          <p class="text-red-600">加载失败，请刷新重试</p>
        </div>
      `;
    }
  };
  
  // 应用过滤
  applyFilterBtn.addEventListener('click', () => {
    currentFilters = {
      action: actionFilter.value,
      startDate: startDate.value,
      endDate: endDate.value,
    };
    
    log('应用过滤', currentFilters);
    currentPage = 1;
    loadHistory();
  });
  
  // 重置过滤
  resetFilterBtn.addEventListener('click', () => {
    actionFilter.value = '';
    startDate.value = '';
    endDate.value = '';
    currentFilters = {
      action: '',
      startDate: '',
      endDate: '',
    };
    
    log('重置过滤');
    currentPage = 1;
    loadHistory();
  });
  
  // 清除所有记录
  clearAllBtn.addEventListener('click', async () => {
    if (!confirm('确定要清除所有历史记录吗？此操作不可恢复。')) {
      return;
    }
    
    log('清除所有历史记录');
    
    try {
      const response = await fetch('/api/history?all=true', {
        method: 'DELETE',
      });
      
      if (response.ok) {
        log('清除成功');
        historyList.classList.add('hidden');
        emptyState.classList.remove('hidden');
        pagination.classList.add('hidden');
      } else {
        const data = await response.json();
        alert(data.error || '清除失败');
      }
    } catch (error) {
      log('清除失败', error);
      alert('网络错误，请稍后重试');
    }
  });
  
  // 初始加载
  loadHistory();
</script>