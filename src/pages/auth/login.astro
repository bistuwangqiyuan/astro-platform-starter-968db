---
import BaseLayout from '../../layouts/BaseLayout.astro';
import Input from '../../components/ui/Input.astro';
import Button from '../../components/ui/Button.astro';

const title = '用户登录';
const description = '登录您的账户，开始使用Astro平台的数据分析功能';
---

<BaseLayout title={title} description={description} containerClass="container-sm">
  <div class="min-h-screen flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8">
    <div class="max-w-md w-full space-y-8">
      <!-- 头部 -->
      <div class="text-center">
        <h1 class="text-3xl font-bold text-gray-900 dark:text-gray-100">
          欢迎回来
        </h1>
        <p class="mt-2 text-gray-600 dark:text-gray-400">
          登录您的账户继续使用
        </p>
      </div>

      <!-- 登录表单 -->
      <div class="card">
        <div class="card-body">
          <!-- 错误提示 -->
          <div id="error-alert" class="alert alert-error hidden mb-6" role="alert">
            <span id="error-message"></span>
          </div>

          <!-- 成功提示 -->
          <div id="success-alert" class="alert alert-success hidden mb-6" role="alert">
            <span id="success-message"></span>
          </div>

          <form id="login-form" class="space-y-6">
            <!-- 邮箱 -->
            <Input
              id="email"
              name="email"
              type="email"
              label="邮箱地址"
              placeholder="请输入您的邮箱"
              required={true}
              autocomplete="email"
            />

            <!-- 密码 -->
            <Input
              id="password"
              name="password"
              type="password"
              label="密码"
              placeholder="请输入您的密码"
              required={true}
              autocomplete="current-password"
            />

            <!-- 记住我 -->
            <div class="flex items-center justify-between">
              <div class="flex items-center">
                <input
                  id="remember-me"
                  name="remember-me"
                  type="checkbox"
                  class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                >
                <label for="remember-me" class="ml-2 block text-sm text-gray-900 dark:text-gray-300">
                  记住我
                </label>
              </div>

              <div class="text-sm">
                <a href="/auth/forgot-password" class="font-medium text-blue-600 hover:text-blue-500 dark:text-blue-400 dark:hover:text-blue-300">
                  忘记密码？
                </a>
              </div>
            </div>

            <!-- 登录按钮 -->
            <Button
              id="login-button"
              type="submit"
              variant="primary"
              class="w-full"
            >
              <span id="login-text">登录</span>
            </Button>
          </form>

          <!-- 分隔线 -->
          <div class="mt-6">
            <div class="relative">
              <div class="absolute inset-0 flex items-center">
                <div class="w-full border-t border-gray-300 dark:border-gray-600"></div>
              </div>
              <div class="relative flex justify-center text-sm">
                <span class="px-2 bg-white dark:bg-gray-800 text-gray-500 dark:text-gray-400">
                  或者
                </span>
              </div>
            </div>
          </div>

          <!-- 注册链接 -->
          <div class="mt-6 text-center">
            <p class="text-sm text-gray-600 dark:text-gray-400">
              还没有账户？
              <a href="/auth/register" class="font-medium text-blue-600 hover:text-blue-500 dark:text-blue-400 dark:hover:text-blue-300">
                立即注册
              </a>
            </p>
          </div>
        </div>
      </div>

      <!-- 返回首页 -->
      <div class="text-center">
        <a href="/" class="text-sm text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200">
          ← 返回首页
        </a>
      </div>
    </div>
  </div>
</BaseLayout>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const form = document.getElementById('login-form') as HTMLFormElement;
    const loginButton = document.getElementById('login-button') as HTMLButtonElement;
    const loginText = document.getElementById('login-text') as HTMLSpanElement;
    const errorAlert = document.getElementById('error-alert') as HTMLDivElement;
    const errorMessage = document.getElementById('error-message') as HTMLSpanElement;
    const successAlert = document.getElementById('success-alert') as HTMLDivElement;
    const successMessage = document.getElementById('success-message') as HTMLSpanElement;

    // Reason: 显示错误信息
    function showError(message: string) {
      errorMessage.textContent = message;
      errorAlert.classList.remove('hidden');
      successAlert.classList.add('hidden');
      console.error('[Login] 错误:', message);
    }

    // Reason: 显示成功信息
    function showSuccess(message: string) {
      successMessage.textContent = message;
      successAlert.classList.remove('hidden');
      errorAlert.classList.add('hidden');
      console.log('[Login] 成功:', message);
    }

    // Reason: 隐藏所有提示
    function hideAlerts() {
      errorAlert.classList.add('hidden');
      successAlert.classList.add('hidden');
    }

    // Reason: 设置加载状态
    function setLoading(loading: boolean) {
      if (loading) {
        loginButton.disabled = true;
        loginButton.setAttribute('loading', 'true');
        loginText.textContent = '登录中...';
      } else {
        loginButton.disabled = false;
        loginButton.removeAttribute('loading');
        loginText.textContent = '登录';
      }
    }

    // Reason: 表单提交处理
    form.addEventListener('submit', async (event) => {
      event.preventDefault();
      
      console.log('[Login] 开始登录流程');
      hideAlerts();
      setLoading(true);

      try {
        const formData = new FormData(form);
        const email = formData.get('email') as string;
        const password = formData.get('password') as string;

        // Reason: 客户端验证
        if (!email || !password) {
          showError('请填写所有必填字段');
          setLoading(false);
          return;
        }

        // Reason: 发送登录请求
        const response = await fetch('/api/auth/login', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            email,
            password
          })
        });

        const result = await response.json();

        if (result.success) {
          showSuccess(result.message || '登录成功！');
          
          // Reason: 获取重定向URL
          const urlParams = new URLSearchParams(window.location.search);
          const redirectUrl = urlParams.get('redirect') || '/';
          
          console.log(`[Login] 登录成功，重定向到: ${redirectUrl}`);
          
          // Reason: 延迟重定向，让用户看到成功消息
          setTimeout(() => {
            window.location.href = redirectUrl;
          }, 1000);
        } else {
          showError(result.error || '登录失败，请重试');
          setLoading(false);
        }
      } catch (error) {
        console.error('[Login] 登录过程出错:', error);
        showError('网络错误，请检查网络连接后重试');
        setLoading(false);
      }
    });

    // Reason: 输入框聚焦时隐藏错误提示
    const inputs = form.querySelectorAll('input');
    inputs.forEach(input => {
      input.addEventListener('focus', () => {
        hideAlerts();
      });
    });

    // Reason: Enter键快捷登录
    document.addEventListener('keydown', (event) => {
      if (event.key === 'Enter' && !loginButton.disabled) {
        form.dispatchEvent(new Event('submit'));
      }
    });

    console.log('[Login] 登录页面初始化完成');
  });
</script>

<style>
  /* Reason: 登录页面的特殊样式 */
  .min-h-screen {
    min-height: calc(100vh - 4rem); /* 减去header高度 */
  }
  
  /* Reason: 表单动画效果 */
  .card {
    animation: slideUp 0.5s ease-out;
  }
  
  /* Reason: 输入框聚焦增强效果 */
  input:focus {
    transform: scale(1.02);
    transition: transform 0.2s ease;
  }
  
  /* Reason: 链接悬停效果 */
  a {
    transition: color 0.2s ease;
  }
  
  /* Reason: 错误和成功提示的动画 */
  .alert {
    animation: fadeIn 0.3s ease-out;
  }
</style>