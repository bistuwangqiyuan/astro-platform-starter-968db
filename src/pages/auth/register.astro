---
import BaseLayout from '../../layouts/BaseLayout.astro';
import Input from '../../components/ui/Input.astro';
import Button from '../../components/ui/Button.astro';

// 检查用户是否已登录
import { getCurrentUser } from '../../utils/auth';

// 如果已登录，重定向到首页
const user = await getCurrentUser();
if (user) {
  return Astro.redirect('/');
}
---

<BaseLayout title="注册">
  <div class="container mx-auto px-4 py-8">
    <div class="max-w-md mx-auto">
      <h1 class="text-3xl font-bold mb-8 text-center">创建账户</h1>
      
      <form id="registerForm" class="space-y-6">
        <div>
          <label for="email" class="block text-sm font-medium mb-2">
            邮箱地址
          </label>
          <Input
            type="email"
            id="email"
            name="email"
            required
            placeholder="your@email.com"
            class="w-full"
          />
        </div>

        <div>
          <label for="password" class="block text-sm font-medium mb-2">
            密码
          </label>
          <Input
            type="password"
            id="password"
            name="password"
            required
            placeholder="至少6个字符"
            class="w-full"
          />
          <p class="text-xs text-gray-500 mt-1">密码至少需要6个字符</p>
        </div>

        <div>
          <label for="confirmPassword" class="block text-sm font-medium mb-2">
            确认密码
          </label>
          <Input
            type="password"
            id="confirmPassword"
            name="confirmPassword"
            required
            placeholder="再次输入密码"
            class="w-full"
          />
        </div>

        <div id="error-message" class="text-red-600 text-sm hidden"></div>
        <div id="success-message" class="text-green-600 text-sm hidden"></div>

        <Button type="submit" variant="primary" class="w-full">
          注册
        </Button>
      </form>

      <div class="mt-6 text-center">
        <p class="text-sm text-gray-600">
          已有账户？
          <a href="/auth/login" class="text-blue-600 hover:underline">
            立即登录
          </a>
        </p>
      </div>
    </div>
  </div>
</BaseLayout>

<script>
  // 注册表单处理
  const registerForm = document.getElementById('registerForm') as HTMLFormElement;
  const errorMessage = document.getElementById('error-message') as HTMLDivElement;
  const successMessage = document.getElementById('success-message') as HTMLDivElement;

  registerForm.addEventListener('submit', async (e) => {
    e.preventDefault();
    
    // 重置消息
    errorMessage.classList.add('hidden');
    successMessage.classList.add('hidden');
    
    // 获取表单数据
    const formData = new FormData(registerForm);
    const email = formData.get('email') as string;
    const password = formData.get('password') as string;
    const confirmPassword = formData.get('confirmPassword') as string;
    
    // 前端验证
    if (password !== confirmPassword) {
      errorMessage.textContent = '两次输入的密码不一致';
      errorMessage.classList.remove('hidden');
      return;
    }
    
    if (password.length < 6) {
      errorMessage.textContent = '密码至少需要6个字符';
      errorMessage.classList.remove('hidden');
      return;
    }
    
    console.log('[Register] 开始注册请求', { email });
    
    try {
      const response = await fetch('/api/auth/register', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ email, password, confirmPassword }),
      });
      
      const data = await response.json();
      
      if (response.ok) {
        console.log('[Register] 注册成功', data);
        successMessage.textContent = data.message || '注册成功！正在跳转到登录页面...';
        successMessage.classList.remove('hidden');
        
        // 如果自动登录，跳转到首页
        if (data.session) {
          setTimeout(() => {
            window.location.href = '/';
          }, 2000);
        } else {
          // 否则跳转到登录页面
          setTimeout(() => {
            window.location.href = '/auth/login';
          }, 2000);
        }
      } else {
        console.log('[Register] 注册失败', data);
        errorMessage.textContent = data.error || '注册失败，请重试';
        errorMessage.classList.remove('hidden');
      }
    } catch (error) {
      console.error('[Register] 注册出错', error);
      errorMessage.textContent = '网络错误，请稍后重试';
      errorMessage.classList.remove('hidden');
    }
  });

  // 实时密码匹配验证
  const passwordInput = document.getElementById('password') as HTMLInputElement;
  const confirmPasswordInput = document.getElementById('confirmPassword') as HTMLInputElement;
  
  confirmPasswordInput.addEventListener('input', () => {
    if (confirmPasswordInput.value && passwordInput.value !== confirmPasswordInput.value) {
      confirmPasswordInput.setCustomValidity('密码不匹配');
    } else {
      confirmPasswordInput.setCustomValidity('');
    }
  });
</script>