---
import BaseLayout from '../layouts/BaseLayout.astro';
import Button from '../components/ui/Button.astro';
import Input from '../components/ui/Input.astro';
import { getCurrentUser } from '../utils/auth';

// 确保用户已登录（中间件会处理重定向）
const user = await getCurrentUser();
---

<BaseLayout title="个人资料">
  <div class="container mx-auto px-4 py-8">
    <h1 class="text-3xl font-bold mb-8">个人资料</h1>
    
    <div class="grid grid-cols-1 md:grid-cols-3 gap-8">
      <!-- 左侧：用户信息 -->
      <div class="md:col-span-1">
        <div class="bg-white rounded-lg shadow p-6">
          <div class="text-center">
            <div class="w-24 h-24 bg-blue-100 rounded-full mx-auto mb-4 flex items-center justify-center">
              <span class="text-3xl font-bold text-blue-600">
                {user?.email?.charAt(0).toUpperCase()}
              </span>
            </div>
            <h2 class="text-xl font-semibold mb-2">{user?.email}</h2>
            <p class="text-sm text-gray-500">
              注册时间：{user?.created_at ? new Date(user.created_at).toLocaleDateString('zh-CN') : '未知'}
            </p>
          </div>
          
          <div class="mt-6 pt-6 border-t">
            <dl class="space-y-3">
              <div>
                <dt class="text-sm font-medium text-gray-500">用户ID</dt>
                <dd class="text-sm text-gray-900 font-mono">{user?.id}</dd>
              </div>
              <div>
                <dt class="text-sm font-medium text-gray-500">邮箱验证</dt>
                <dd class="text-sm">
                  {user?.email_confirmed_at ? (
                    <span class="text-green-600">已验证</span>
                  ) : (
                    <span class="text-yellow-600">未验证</span>
                  )}
                </dd>
              </div>
            </dl>
          </div>
        </div>
      </div>
      
      <!-- 右侧：设置选项 -->
      <div class="md:col-span-2 space-y-6">
        <!-- 修改密码 -->
        <div class="bg-white rounded-lg shadow p-6">
          <h3 class="text-lg font-semibold mb-4">修改密码</h3>
          
          <form id="changePasswordForm" class="space-y-4">
            <div>
              <label for="currentPassword" class="block text-sm font-medium mb-1">
                当前密码
              </label>
              <Input
                type="password"
                id="currentPassword"
                name="currentPassword"
                required
                placeholder="输入当前密码"
              />
            </div>
            
            <div>
              <label for="newPassword" class="block text-sm font-medium mb-1">
                新密码
              </label>
              <Input
                type="password"
                id="newPassword"
                name="newPassword"
                required
                placeholder="输入新密码（至少6个字符）"
              />
            </div>
            
            <div>
              <label for="confirmNewPassword" class="block text-sm font-medium mb-1">
                确认新密码
              </label>
              <Input
                type="password"
                id="confirmNewPassword"
                name="confirmNewPassword"
                required
                placeholder="再次输入新密码"
              />
            </div>
            
            <div id="passwordError" class="text-red-600 text-sm hidden"></div>
            <div id="passwordSuccess" class="text-green-600 text-sm hidden"></div>
            
            <Button type="submit" variant="primary">
              更新密码
            </Button>
          </form>
        </div>
        
        <!-- 统计信息 -->
        <div class="bg-white rounded-lg shadow p-6">
          <h3 class="text-lg font-semibold mb-4">使用统计</h3>
          
          <div id="statistics" class="grid grid-cols-2 md:grid-cols-4 gap-4">
            <div class="text-center">
              <div class="text-2xl font-bold text-blue-600">-</div>
              <div class="text-sm text-gray-500">总分析数</div>
            </div>
            <div class="text-center">
              <div class="text-2xl font-bold text-yellow-600">-</div>
              <div class="text-sm text-gray-500">收藏数</div>
            </div>
            <div class="text-center">
              <div class="text-2xl font-bold text-green-600">-</div>
              <div class="text-sm text-gray-500">本月分析</div>
            </div>
            <div class="text-center">
              <div class="text-2xl font-bold text-purple-600">-</div>
              <div class="text-sm text-gray-500">今日分析</div>
            </div>
          </div>
        </div>
        
        <!-- 危险区域 -->
        <div class="bg-white rounded-lg shadow p-6 border-2 border-red-200">
          <h3 class="text-lg font-semibold mb-4 text-red-600">危险区域</h3>
          
          <div class="space-y-4">
            <div>
              <p class="text-sm text-gray-600 mb-2">
                清除所有分析记录和收藏。此操作不可恢复。
              </p>
              <Button id="clearDataBtn" variant="danger" size="sm">
                清除所有数据
              </Button>
            </div>
            
            <div class="pt-4 border-t">
              <p class="text-sm text-gray-600 mb-2">
                永久删除您的账户和所有相关数据。此操作不可恢复。
              </p>
              <Button id="deleteAccountBtn" variant="danger" size="sm">
                删除账户
              </Button>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</BaseLayout>

<script>
  import { supabase } from '../utils/supabase';
  
  // 日志函数
  const log = (message: string, data?: any) => {
    console.log(`[Profile] ${message}`, data || '');
  };
  
  // DOM 元素
  const changePasswordForm = document.getElementById('changePasswordForm') as HTMLFormElement;
  const passwordError = document.getElementById('passwordError') as HTMLDivElement;
  const passwordSuccess = document.getElementById('passwordSuccess') as HTMLDivElement;
  const clearDataBtn = document.getElementById('clearDataBtn') as HTMLButtonElement;
  const deleteAccountBtn = document.getElementById('deleteAccountBtn') as HTMLButtonElement;
  const statistics = document.getElementById('statistics') as HTMLDivElement;
  
  // 加载统计信息
  const loadStatistics = async () => {
    log('加载统计信息');
    
    try {
      // 获取当前用户
      const { data: { user } } = await supabase.auth.getUser();
      if (!user) return;
      
      // 获取分析总数
      const { count: analysisCount } = await supabase
        .from('analyses')
        .select('*', { count: 'exact', head: true })
        .eq('user_id', user.id);
      
      // 获取收藏总数
      const { count: favoriteCount } = await supabase
        .from('favorites')
        .select('*', { count: 'exact', head: true })
        .eq('user_id', user.id);
      
      // 获取本月分析数
      const startOfMonth = new Date();
      startOfMonth.setDate(1);
      startOfMonth.setHours(0, 0, 0, 0);
      
      const { count: monthlyCount } = await supabase
        .from('analyses')
        .select('*', { count: 'exact', head: true })
        .eq('user_id', user.id)
        .gte('created_at', startOfMonth.toISOString());
      
      // 获取今日分析数
      const startOfDay = new Date();
      startOfDay.setHours(0, 0, 0, 0);
      
      const { count: dailyCount } = await supabase
        .from('analyses')
        .select('*', { count: 'exact', head: true })
        .eq('user_id', user.id)
        .gte('created_at', startOfDay.toISOString());
      
      // 更新显示
      const statElements = statistics.querySelectorAll('.text-2xl');
      statElements[0].textContent = (analysisCount || 0).toString();
      statElements[1].textContent = (favoriteCount || 0).toString();
      statElements[2].textContent = (monthlyCount || 0).toString();
      statElements[3].textContent = (dailyCount || 0).toString();
      
      log('统计信息加载成功', {
        analysisCount,
        favoriteCount,
        monthlyCount,
        dailyCount,
      });
    } catch (error) {
      log('加载统计信息失败', error);
    }
  };
  
  // 修改密码
  changePasswordForm.addEventListener('submit', async (e) => {
    e.preventDefault();
    
    // 重置消息
    passwordError.classList.add('hidden');
    passwordSuccess.classList.add('hidden');
    
    // 获取表单数据
    const formData = new FormData(changePasswordForm);
    const currentPassword = formData.get('currentPassword') as string;
    const newPassword = formData.get('newPassword') as string;
    const confirmNewPassword = formData.get('confirmNewPassword') as string;
    
    // 前端验证
    if (newPassword !== confirmNewPassword) {
      passwordError.textContent = '两次输入的新密码不一致';
      passwordError.classList.remove('hidden');
      return;
    }
    
    if (newPassword.length < 6) {
      passwordError.textContent = '新密码至少需要6个字符';
      passwordError.classList.remove('hidden');
      return;
    }
    
    log('开始修改密码');
    
    try {
      const response = await fetch('/api/auth/change-password', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          currentPassword,
          newPassword,
          confirmPassword: confirmNewPassword,
        }),
      });
      
      const data = await response.json();
      
      if (response.ok) {
        log('修改密码成功');
        passwordSuccess.textContent = '密码修改成功！';
        passwordSuccess.classList.remove('hidden');
        changePasswordForm.reset();
      } else {
        log('修改密码失败', data);
        passwordError.textContent = data.error || '修改密码失败，请重试';
        passwordError.classList.remove('hidden');
      }
    } catch (error) {
      log('修改密码出错', error);
      passwordError.textContent = '网络错误，请稍后重试';
      passwordError.classList.remove('hidden');
    }
  });
  
  // 清除所有数据
  clearDataBtn.addEventListener('click', async () => {
    if (!confirm('确定要清除所有分析记录和收藏吗？此操作不可恢复。')) {
      return;
    }
    
    if (!confirm('请再次确认：这将永久删除您的所有分析数据和收藏！')) {
      return;
    }
    
    log('清除所有数据');
    
    try {
      const { data: { user } } = await supabase.auth.getUser();
      if (!user) return;
      
      // 删除所有收藏
      await supabase
        .from('favorites')
        .delete()
        .eq('user_id', user.id);
      
      // 删除所有分析
      await supabase
        .from('analyses')
        .delete()
        .eq('user_id', user.id);
      
      // 删除所有历史记录
      await supabase
        .from('history')
        .delete()
        .eq('user_id', user.id);
      
      log('清除数据成功');
      alert('所有数据已清除');
      
      // 重新加载统计信息
      loadStatistics();
    } catch (error) {
      log('清除数据失败', error);
      alert('清除数据失败，请重试');
    }
  });
  
  // 删除账户
  deleteAccountBtn.addEventListener('click', async () => {
    if (!confirm('确定要删除您的账户吗？此操作将永久删除您的账户和所有相关数据，不可恢复。')) {
      return;
    }
    
    const confirmText = prompt('请输入 "DELETE" 来确认删除账户：');
    if (confirmText !== 'DELETE') {
      alert('确认文本不正确，取消删除');
      return;
    }
    
    log('删除账户');
    
    try {
      // 这里应该调用后端API来删除账户
      // 由于Supabase不允许用户直接删除自己的账户，需要使用service role
      alert('账户删除功能需要管理员权限，请联系管理员');
    } catch (error) {
      log('删除账户失败', error);
      alert('删除账户失败，请联系管理员');
    }
  });
  
  // 初始加载
  loadStatistics();
</script>