---
// 收藏夹页面 - AIKeyword项目
import BaseLayout from '@/layouts/BaseLayout.astro';
import Header from '@/components/layout/Header.astro';
import Footer from '@/components/layout/Footer.astro';
import Button from '@/components/ui/Button.astro';
import Input from '@/components/ui/Input.astro';
import Modal from '@/components/ui/Modal.astro';

const title = '收藏夹 - AIKeyword';
const description = '管理您收藏的关键词，组织和分类您关注的关键词。';
---

<BaseLayout title={title} description={description}>
    <Header slot="header" />

    <main class="min-h-screen bg-gray-50">
        <!-- 页面标题 -->
        <section class="bg-white border-b border-gray-200">
            <div class="container py-8">
                <div class="flex flex-col lg:flex-row lg:items-center lg:justify-between">
                    <div>
                        <h1 class="text-2xl sm:text-3xl font-bold text-gray-900">我的收藏</h1>
                        <p class="mt-2 text-gray-600">管理您关注的关键词</p>
                    </div>
                    <div class="mt-4 lg:mt-0 flex space-x-3">
                        <Button variant="primary" size="sm" id="add-favorite-button">
                            <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                            </svg>
                            添加收藏
                        </Button>
                        <Button variant="outline" size="sm" id="delete-selected-button" className="text-error-600 border-error-300 hover:bg-error-50">
                            <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path
                                    stroke-linecap="round"
                                    stroke-linejoin="round"
                                    stroke-width="2"
                                    d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"
                                ></path>
                            </svg>
                            删除选中
                        </Button>
                    </div>
                </div>
            </div>
        </section>

        <!-- 筛选区域 -->
        <section class="bg-white">
            <div class="container py-6">
                <form id="filter-form" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                    <!-- 关键词搜索 -->
                    <div>
                        <label class="form-label">搜索关键词</label>
                        <Input type="search" id="keyword-filter" placeholder="输入关键词..." size="sm" />
                    </div>

                    <!-- 分类筛选 -->
                    <div>
                        <label class="form-label">分类</label>
                        <select id="category-filter" class="form-select text-sm">
                            <option value="">全部分类</option>
                            <option value="默认分类">默认分类</option>
                        </select>
                    </div>

                    <!-- 优先级筛选 -->
                    <div>
                        <label class="form-label">优先级</label>
                        <select id="priority-filter" class="form-select text-sm">
                            <option value="">全部优先级</option>
                            <option value="5">高优先级</option>
                            <option value="4">较高优先级</option>
                            <option value="3">中等优先级</option>
                            <option value="2">较低优先级</option>
                            <option value="1">低优先级</option>
                        </select>
                    </div>

                    <!-- 搜索按钮 -->
                    <div class="flex items-end">
                        <Button type="submit" variant="primary" size="sm" className="w-full">搜索</Button>
                    </div>
                </form>
            </div>
        </section>

        <!-- 结果区域 -->
        <section class="container py-8">
            <!-- 加载状态 -->
            <div id="loading-state" class="text-center py-16">
                <div class="inline-flex items-center justify-center w-12 h-12 bg-primary-100 rounded-full mb-4">
                    <svg class="animate-spin w-6 h-6 text-primary-600" fill="none" viewBox="0 0 24 24">
                        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                        <path
                            class="opacity-75"
                            fill="currentColor"
                            d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                    </svg>
                </div>
                <p class="text-gray-600">正在加载收藏...</p>
            </div>

            <!-- 错误状态 -->
            <div id="error-state" class="hidden text-center py-16">
                <div class="inline-flex items-center justify-center w-12 h-12 bg-error-100 rounded-full mb-4">
                    <svg class="w-6 h-6 text-error-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                    </svg>
                </div>
                <h3 class="text-lg font-semibold text-gray-900 mb-2">加载失败</h3>
                <p class="text-gray-600 mb-4" id="error-message">请稍后重试</p>
                <Button onclick="loadFavorites()" variant="outline">重新加载</Button>
            </div>

            <!-- 空状态 -->
            <div id="empty-state" class="hidden text-center py-16">
                <div class="inline-flex items-center justify-center w-12 h-12 bg-gray-100 rounded-full mb-4">
                    <svg class="w-6 h-6 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path
                            stroke-linecap="round"
                            stroke-linejoin="round"
                            stroke-width="2"
                            d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z"
                        ></path>
                    </svg>
                </div>
                <h3 class="text-lg font-semibold text-gray-900 mb-2">暂无收藏</h3>
                <p class="text-gray-600 mb-4">您还没有收藏任何关键词</p>
                <Button id="add-first-favorite" variant="primary">添加第一个收藏</Button>
            </div>

            <!-- 收藏网格 -->
            <div id="favorites-grid" class="hidden">
                <!-- 统计信息 -->
                <div class="flex items-center justify-between mb-6">
                    <div class="flex items-center space-x-4">
                        <label class="flex items-center">
                            <input type="checkbox" id="select-all" class="mr-2 h-4 w-4 text-primary-600 border-gray-300 rounded" />
                            <span class="text-sm text-gray-600">全选</span>
                        </label>
                        <span id="selected-count" class="text-sm text-gray-500">已选择 0 项</span>
                    </div>
                    <div>
                        <span id="total-count" class="text-sm text-gray-500">共 0 个收藏</span>
                    </div>
                </div>

                <!-- 收藏卡片网格 -->
                <div id="favorites-container" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
                    <!-- 收藏卡片将通过JavaScript填充 -->
                </div>

                <!-- 分页控件 -->
                <div class="mt-8 flex items-center justify-center">
                    <div class="flex items-center space-x-2">
                        <Button variant="outline" size="sm" id="prev-page" disabled>上一页</Button>
                        <span id="page-info" class="text-sm text-gray-700 px-4">第 1 页，共 1 页</span>
                        <Button variant="outline" size="sm" id="next-page" disabled>下一页</Button>
                    </div>
                </div>
            </div>
        </section>
    </main>

    <!-- 添加/编辑收藏弹窗 -->
    <div id="favorite-modal" class="hidden fixed inset-0 z-50 overflow-y-auto bg-gray-900 bg-opacity-75 flex items-center justify-center p-4">
        <div class="bg-white rounded-lg shadow-xl max-w-md w-full p-6">
            <div class="flex items-center justify-between mb-4">
                <h3 class="text-lg font-medium text-gray-900" id="modal-title">添加收藏</h3>
                <button id="close-modal" class="text-gray-400 hover:text-gray-600">
                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                    </svg>
                </button>
            </div>

            <form id="favorite-form" class="space-y-4">
                <input type="hidden" id="favorite-id" />

                <!-- 关键词 -->
                <div>
                    <label class="form-label">关键词 *</label>
                    <Input type="text" id="modal-keyword" placeholder="输入关键词..." required className="w-full" />
                </div>

                <!-- 分类 -->
                <div>
                    <label class="form-label">分类</label>
                    <Input type="text" id="modal-category" placeholder="输入分类名称..." defaultValue="默认分类" className="w-full" />
                </div>

                <!-- 优先级 -->
                <div>
                    <label class="form-label">优先级</label>
                    <select id="modal-priority" class="form-select w-full">
                        <option value="5">高优先级</option>
                        <option value="4">较高优先级</option>
                        <option value="3" selected>中等优先级</option>
                        <option value="2">较低优先级</option>
                        <option value="1">低优先级</option>
                    </select>
                </div>

                <!-- 标签 -->
                <div>
                    <label class="form-label">标签</label>
                    <Input type="text" id="modal-tags" placeholder="输入标签，用逗号分隔..." className="w-full" />
                    <p class="text-xs text-gray-500 mt-1">例如：竞争分析, 热门, 长尾词</p>
                </div>

                <!-- 备注 -->
                <div>
                    <label class="form-label">备注</label>
                    <textarea id="modal-notes" rows="3" placeholder="添加备注..." class="form-textarea w-full"></textarea>
                </div>

                <!-- 按钮 -->
                <div class="flex space-x-3 pt-4">
                    <Button type="submit" variant="primary" className="flex-1" id="save-favorite">保存</Button>
                    <Button type="button" variant="outline" className="flex-1" id="cancel-modal">取消</Button>
                </div>
            </form>
        </div>
    </div>

    <Footer slot="footer" />
</BaseLayout>

<script>
    // 收藏夹页面功能
    document.addEventListener('DOMContentLoaded', () => {
        window.logKeyStep('收藏夹页面加载完成');
        initializeFavoritesPage();
    });

    // 全局状态
    let currentPage = 1;
    let pageSize = 20;
    let totalPages = 1;
    let selectedFavorites = new Set();
    let allFavorites: any[] = [];
    let currentFilters = {};
    let editingFavorite: any = null;

    function initializeFavoritesPage() {
        // 绑定事件
        bindEvents();

        // 检查登录状态
        checkAuthAndLoad();

        window.logKeyStep('收藏夹页面初始化完成');
    }

    function bindEvents() {
        // 筛选表单
        const filterForm = document.getElementById('filter-form');
        filterForm?.addEventListener('submit', (e) => {
            e.preventDefault();
            currentPage = 1;
            loadFavorites();
        });

        // 添加收藏按钮
        const addButton = document.getElementById('add-favorite-button');
        const addFirstButton = document.getElementById('add-first-favorite');

        addButton?.addEventListener('click', () => showAddModal());
        addFirstButton?.addEventListener('click', () => showAddModal());

        // 删除按钮
        const deleteButton = document.getElementById('delete-selected-button');
        deleteButton?.addEventListener('click', () => deleteSelectedFavorites());

        // 全选复选框
        const selectAllCheckbox = document.getElementById('select-all') as HTMLInputElement;
        selectAllCheckbox?.addEventListener('change', () => {
            toggleSelectAll(selectAllCheckbox.checked);
        });

        // 分页按钮
        const prevButton = document.getElementById('prev-page');
        const nextButton = document.getElementById('next-page');

        prevButton?.addEventListener('click', () => {
            if (currentPage > 1) {
                currentPage--;
                loadFavorites();
            }
        });

        nextButton?.addEventListener('click', () => {
            if (currentPage < totalPages) {
                currentPage++;
                loadFavorites();
            }
        });

        // 弹窗事件
        bindModalEvents();
    }

    function bindModalEvents() {
        const modal = document.getElementById('favorite-modal');
        const closeButton = document.getElementById('close-modal');
        const cancelButton = document.getElementById('cancel-modal');
        const form = document.getElementById('favorite-form');

        closeButton?.addEventListener('click', () => hideModal());
        cancelButton?.addEventListener('click', () => hideModal());

        // 点击弹窗外部关闭
        modal?.addEventListener('click', (e) => {
            if (e.target === modal) {
                hideModal();
            }
        });

        // 表单提交
        form?.addEventListener('submit', (e) => {
            e.preventDefault();
            saveFavorite();
        });
    }

    async function checkAuthAndLoad() {
        try {
            const response = await fetch('/api/auth/login', {
                method: 'GET'
            });

            if (response.ok) {
                const result = await response.json();
                if (result.success && result.user) {
                    // 用户已登录，加载收藏
                    loadFavorites();
                } else {
                    // 用户未登录，跳转到登录页
                    window.location.href = '/auth/login?redirect=' + encodeURIComponent(window.location.pathname);
                }
            } else {
                // 认证失败
                window.location.href = '/auth/login?redirect=' + encodeURIComponent(window.location.pathname);
            }
        } catch (error) {
            console.error('[FAVORITES] 检查认证状态失败:', error);
            showErrorState('网络错误，请检查连接');
        }
    }

    async function loadFavorites() {
        try {
            window.logKeyStep('开始加载收藏', { page: currentPage, pageSize });

            showLoadingState();

            // 获取筛选条件
            const filters = getFilters();
            currentFilters = filters;

            const params = new URLSearchParams({
                page: currentPage.toString(),
                limit: pageSize.toString(),
                ...filters
            });

            const response = await fetch(`/api/favorites?${params}`, {
                method: 'GET'
            });

            const result = await response.json();

            if (result.success && result.data) {
                allFavorites = result.data.favorites;
                const pagination = result.data.pagination;

                totalPages = pagination.totalPages;

                // 更新UI
                displayFavoritesGrid(allFavorites);
                updatePagination(pagination);
                updateSelectedCount();

                // 更新分类筛选器
                updateCategoryFilter(allFavorites);

                window.logKeyStep('收藏加载完成', {
                    favoriteCount: allFavorites.length,
                    total: pagination.total
                });
            } else {
                const errorMsg = result.error || '加载收藏失败';
                window.logKeyStep('收藏加载失败', { error: errorMsg });

                if (result.error?.includes('未登录') || result.error?.includes('登录已过期')) {
                    window.location.href = '/auth/login?redirect=' + encodeURIComponent(window.location.pathname);
                    return;
                }

                showErrorState(errorMsg);
            }
        } catch (error) {
            console.error('[FAVORITES] 加载收藏失败:', error);
            window.logKeyStep('收藏加载异常', error);
            showErrorState('网络错误，请重试');
        }
    }

    function getFilters() {
        const keyword = (document.getElementById('keyword-filter') as HTMLInputElement)?.value.trim();
        const category = (document.getElementById('category-filter') as HTMLSelectElement)?.value;
        const priority = (document.getElementById('priority-filter') as HTMLSelectElement)?.value;

        const filters: any = {};

        if (keyword) filters.keyword = keyword;
        if (category) filters.category = category;
        if (priority) filters.priority = priority;

        return filters;
    }

    function displayFavoritesGrid(favorites: any[]) {
        if (favorites.length === 0) {
            showEmptyState();
            return;
        }

        showFavoritesGrid();

        const container = document.getElementById('favorites-container');
        if (!container) return;

        container.innerHTML = favorites
            .map((favorite) => {
                const createdDate = new Date(favorite.created_at).toLocaleDateString('zh-CN');
                const priorityText = getPriorityText(favorite.priority);
                const priorityClass = getPriorityClass(favorite.priority);
                const tags = favorite.tags || [];
                const tagsHtml =
                    tags.length > 0
                        ? tags
                              .map(
                                  (tag: string) =>
                                      `<span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-gray-100 text-gray-800">${tag}</span>`
                              )
                              .join(' ')
                        : '<span class="text-xs text-gray-400">无标签</span>';

                return `
                <div class="bg-white rounded-lg border border-gray-200 shadow-sm hover:shadow-md transition-shadow p-4">
                    <div class="flex items-start justify-between mb-3">
                        <div class="flex items-center space-x-2">
                            <input type="checkbox" class="favorite-checkbox h-4 w-4 text-primary-600 border-gray-300 rounded" 
                                   data-id="${favorite.id}" ${selectedFavorites.has(favorite.id) ? 'checked' : ''}>
                            <h3 class="font-medium text-gray-900 text-sm truncate">${favorite.keyword}</h3>
                        </div>
                        <div class="flex items-center space-x-1">
                            <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${priorityClass}">
                                ${priorityText}
                            </span>
                        </div>
                    </div>

                    <div class="space-y-2 mb-4">
                        <div class="flex items-center justify-between text-xs text-gray-500">
                            <span>分类: ${favorite.category || '默认分类'}</span>
                            <span>${createdDate}</span>
                        </div>
                        
                        ${
                            favorite.notes
                                ? `
                            <p class="text-sm text-gray-600 line-clamp-2">${favorite.notes}</p>
                        `
                                : ''
                        }
                        
                        <div class="flex flex-wrap gap-1">
                            ${tagsHtml}
                        </div>
                    </div>

                    <div class="flex items-center justify-between pt-3 border-t border-gray-100">
                        <div class="flex items-center space-x-2">
                            <button onclick="analyzeFavorite('${favorite.keyword}')" 
                                    class="text-primary-600 hover:text-primary-900 text-sm font-medium">
                                分析
                            </button>
                            <button onclick="editFavorite('${favorite.id}')" 
                                    class="text-accent-600 hover:text-accent-900 text-sm font-medium">
                                编辑
                            </button>
                        </div>
                        <button onclick="deleteFavorite('${favorite.id}')" 
                                class="text-error-600 hover:text-error-900 text-sm font-medium">
                            删除
                        </button>
                    </div>
                </div>
            `;
            })
            .join('');

        // 绑定复选框事件
        const checkboxes = container.querySelectorAll('.favorite-checkbox');
        checkboxes.forEach((checkbox) => {
            checkbox.addEventListener('change', (e) => {
                const target = e.target as HTMLInputElement;
                const favoriteId = target.getAttribute('data-id');
                if (favoriteId) {
                    if (target.checked) {
                        selectedFavorites.add(favoriteId);
                    } else {
                        selectedFavorites.delete(favoriteId);
                    }
                    updateSelectedCount();
                }
            });
        });

        // 更新总数
        updateTotalCount(favorites.length);
    }

    function getPriorityText(priority: number): string {
        const priorityMap: { [key: number]: string } = {
            5: '高',
            4: '较高',
            3: '中',
            2: '较低',
            1: '低'
        };
        return priorityMap[priority] || '中';
    }

    function getPriorityClass(priority: number): string {
        const classMap: { [key: number]: string } = {
            5: 'bg-error-100 text-error-800',
            4: 'bg-warning-100 text-warning-800',
            3: 'bg-primary-100 text-primary-800',
            2: 'bg-accent-100 text-accent-800',
            1: 'bg-gray-100 text-gray-800'
        };
        return classMap[priority] || 'bg-primary-100 text-primary-800';
    }

    function updateCategoryFilter(favorites: any[]) {
        const select = document.getElementById('category-filter') as HTMLSelectElement;
        if (!select) return;

        // 获取所有分类
        const categories = new Set(favorites.map((f) => f.category).filter(Boolean));

        // 保留现有选择
        const currentValue = select.value;

        // 重建选项
        select.innerHTML = '<option value="">全部分类</option>';
        categories.forEach((category) => {
            const option = document.createElement('option');
            option.value = category;
            option.textContent = category;
            select.appendChild(option);
        });

        // 恢复选择
        if (categories.has(currentValue)) {
            select.value = currentValue;
        }
    }

    function updatePagination(pagination: any) {
        const pageInfo = document.getElementById('page-info');
        const prevButton = document.getElementById('prev-page') as HTMLButtonElement;
        const nextButton = document.getElementById('next-page') as HTMLButtonElement;

        if (pageInfo) {
            pageInfo.textContent = `第 ${pagination.page} 页，共 ${pagination.totalPages} 页`;
        }

        if (prevButton) {
            prevButton.disabled = !pagination.hasPrev;
        }

        if (nextButton) {
            nextButton.disabled = !pagination.hasNext;
        }
    }

    function updateSelectedCount() {
        const countElement = document.getElementById('selected-count');
        if (countElement) {
            countElement.textContent = `已选择 ${selectedFavorites.size} 项`;
        }

        // 更新全选复选框状态
        const selectAllCheckbox = document.getElementById('select-all') as HTMLInputElement;
        if (selectAllCheckbox) {
            selectAllCheckbox.checked = selectedFavorites.size > 0 && selectedFavorites.size === allFavorites.length;
            selectAllCheckbox.indeterminate = selectedFavorites.size > 0 && selectedFavorites.size < allFavorites.length;
        }
    }

    function updateTotalCount(count: number) {
        const totalElement = document.getElementById('total-count');
        if (totalElement) {
            totalElement.textContent = `共 ${count} 个收藏`;
        }
    }

    function toggleSelectAll(checked: boolean) {
        if (checked) {
            allFavorites.forEach((favorite) => selectedFavorites.add(favorite.id));
        } else {
            selectedFavorites.clear();
        }

        // 更新复选框状态
        const checkboxes = document.querySelectorAll('.favorite-checkbox') as NodeListOf<HTMLInputElement>;
        checkboxes.forEach((checkbox) => {
            checkbox.checked = checked;
        });

        updateSelectedCount();
    }

    function showLoadingState() {
        hideAllStates();
        document.getElementById('loading-state')?.classList.remove('hidden');
    }

    function showErrorState(message: string) {
        hideAllStates();
        const errorState = document.getElementById('error-state');
        const errorMessage = document.getElementById('error-message');

        if (errorState && errorMessage) {
            errorMessage.textContent = message;
            errorState.classList.remove('hidden');
        }
    }

    function showEmptyState() {
        hideAllStates();
        document.getElementById('empty-state')?.classList.remove('hidden');
    }

    function showFavoritesGrid() {
        hideAllStates();
        document.getElementById('favorites-grid')?.classList.remove('hidden');
    }

    function hideAllStates() {
        ['loading-state', 'error-state', 'empty-state', 'favorites-grid'].forEach((id) => {
            document.getElementById(id)?.classList.add('hidden');
        });
    }

    function showAddModal() {
        editingFavorite = null;

        const modalTitle = document.getElementById('modal-title');
        const form = document.getElementById('favorite-form') as HTMLFormElement;

        if (modalTitle) modalTitle.textContent = '添加收藏';
        if (form) form.reset();

        // 清空隐藏字段
        const idField = document.getElementById('favorite-id') as HTMLInputElement;
        if (idField) idField.value = '';

        showModal();
    }

    function showEditModal(favorite: any) {
        editingFavorite = favorite;

        const modalTitle = document.getElementById('modal-title');
        if (modalTitle) modalTitle.textContent = '编辑收藏';

        // 填充表单
        const idField = document.getElementById('favorite-id') as HTMLInputElement;
        const keywordField = document.getElementById('modal-keyword') as HTMLInputElement;
        const categoryField = document.getElementById('modal-category') as HTMLInputElement;
        const priorityField = document.getElementById('modal-priority') as HTMLSelectElement;
        const tagsField = document.getElementById('modal-tags') as HTMLInputElement;
        const notesField = document.getElementById('modal-notes') as HTMLTextAreaElement;

        if (idField) idField.value = favorite.id;
        if (keywordField) keywordField.value = favorite.keyword;
        if (categoryField) categoryField.value = favorite.category || '';
        if (priorityField) priorityField.value = favorite.priority?.toString() || '3';
        if (tagsField) tagsField.value = (favorite.tags || []).join(', ');
        if (notesField) notesField.value = favorite.notes || '';

        showModal();
    }

    function showModal() {
        const modal = document.getElementById('favorite-modal');
        modal?.classList.remove('hidden');
    }

    function hideModal() {
        const modal = document.getElementById('favorite-modal');
        modal?.classList.add('hidden');
    }

    async function saveFavorite() {
        try {
            const keywordField = document.getElementById('modal-keyword') as HTMLInputElement;
            const categoryField = document.getElementById('modal-category') as HTMLInputElement;
            const priorityField = document.getElementById('modal-priority') as HTMLSelectElement;
            const tagsField = document.getElementById('modal-tags') as HTMLInputElement;
            const notesField = document.getElementById('modal-notes') as HTMLTextAreaElement;
            const idField = document.getElementById('favorite-id') as HTMLInputElement;

            const keyword = keywordField.value.trim();
            const category = categoryField.value.trim();
            const priority = parseInt(priorityField.value);
            const tagsText = tagsField.value.trim();
            const notes = notesField.value.trim();
            const id = idField.value;

            if (!keyword) {
                if (window.utils) {
                    window.utils.showToast('请输入关键词', 'warning');
                }
                return;
            }

            const tags = tagsText
                ? tagsText
                      .split(',')
                      .map((tag) => tag.trim())
                      .filter((tag) => tag)
                : [];

            const favoriteData = {
                keyword,
                category: category || '默认分类',
                priority,
                tags,
                notes: notes || undefined
            };

            window.logKeyStep(id ? '更新收藏' : '添加收藏', favoriteData);

            let response;
            if (id) {
                // 更新收藏
                response = await fetch('/api/favorites', {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        id,
                        ...favoriteData
                    })
                });
            } else {
                // 添加收藏
                response = await fetch('/api/favorites', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(favoriteData)
                });
            }

            const result = await response.json();

            if (result.success) {
                window.logKeyStep('收藏保存成功');

                if (window.utils) {
                    window.utils.showToast(result.message || '保存成功', 'success');
                }

                hideModal();
                loadFavorites();
            } else {
                throw new Error(result.error || '保存失败');
            }
        } catch (error) {
            console.error('[FAVORITES] 保存收藏失败:', error);
            window.logKeyStep('收藏保存失败', error);

            if (window.utils) {
                window.utils.showToast('保存失败: ' + (error as Error).message, 'error');
            }
        }
    }

    async function deleteSelectedFavorites() {
        if (selectedFavorites.size === 0) {
            if (window.utils) {
                window.utils.showToast('请先选择要删除的收藏', 'warning');
            }
            return;
        }

        const confirmed = confirm(`确定要删除选中的 ${selectedFavorites.size} 个收藏吗？此操作不可恢复。`);
        if (!confirmed) return;

        try {
            window.logKeyStep('开始删除收藏', { count: selectedFavorites.size });

            const response = await fetch('/api/favorites', {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    ids: Array.from(selectedFavorites)
                })
            });

            const result = await response.json();

            if (result.success) {
                window.logKeyStep('收藏删除成功');

                if (window.utils) {
                    window.utils.showToast(result.message || '删除成功', 'success');
                }

                // 清空选择
                selectedFavorites.clear();

                // 重新加载数据
                loadFavorites();
            } else {
                throw new Error(result.error || '删除失败');
            }
        } catch (error) {
            console.error('[FAVORITES] 删除收藏失败:', error);
            window.logKeyStep('收藏删除失败', error);

            if (window.utils) {
                window.utils.showToast('删除失败: ' + (error as Error).message, 'error');
            }
        }
    }

    function analyzeFavorite(keyword: string) {
        window.logKeyStep('分析收藏的关键词', { keyword });
        window.location.href = `/analyze?keyword=${encodeURIComponent(keyword)}`;
    }

    function editFavorite(favoriteId: string) {
        const favorite = allFavorites.find((f) => f.id === favoriteId);
        if (favorite) {
            window.logKeyStep('编辑收藏', { favoriteId, keyword: favorite.keyword });
            showEditModal(favorite);
        }
    }

    async function deleteFavorite(favoriteId: string) {
        const confirmed = confirm('确定要删除这个收藏吗？此操作不可恢复。');
        if (!confirmed) return;

        try {
            selectedFavorites.clear();
            selectedFavorites.add(favoriteId);
            await deleteSelectedFavorites();
        } catch (error) {
            console.error('[FAVORITES] 删除单个收藏失败:', error);
        }
    }

    // 全局函数
    (window as any).analyzeFavorite = analyzeFavorite;
    (window as any).editFavorite = editFavorite;
    (window as any).deleteFavorite = deleteFavorite;
    (window as any).loadFavorites = loadFavorites;
</script>

<style>
    /* 收藏夹页面样式 */
    .line-clamp-2 {
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        overflow: hidden;
    }

    .favorite-checkbox:indeterminate {
        background-color: #2563eb;
        border-color: #2563eb;
    }

    /* 卡片悬停效果 */
    .transition-shadow {
        transition: box-shadow 0.15s ease-in-out;
    }

    /* 弹窗动画 */
    #favorite-modal {
        animation: fadeIn 0.3s ease-out;
    }

    #favorite-modal > div {
        animation: slideUp 0.3s ease-out;
    }

    @keyframes fadeIn {
        from {
            opacity: 0;
        }
        to {
            opacity: 1;
        }
    }

    @keyframes slideUp {
        from {
            opacity: 0;
            transform: translateY(-20px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    /* 响应式调整 */
    @media (max-width: 768px) {
        #favorites-container {
            grid-template-columns: 1fr;
        }

        .text-sm {
            font-size: 0.8rem;
        }
    }
</style>
