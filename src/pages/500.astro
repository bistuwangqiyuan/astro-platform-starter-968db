---
import Layout from '../layouts/Layout.astro';
import Button from '../components/ui/Button.astro';

// Reason: 设置500页面的响应状态码
Astro.response.status = 500;
---

<Layout title="服务器错误 - 500">
  <div class="min-h-screen flex items-center justify-center px-4">
    <div class="max-w-lg mx-auto text-center">
      <!-- 500图标 -->
      <div class="mb-8">
        <div class="mx-auto w-32 h-32 bg-gradient-to-br from-red-500 to-red-700 rounded-full flex items-center justify-center">
          <svg class="w-16 h-16 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-2.694-.833-3.464 0L3.34 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
          </svg>
        </div>
      </div>

      <!-- 错误信息 -->
      <div class="space-y-4">
        <h1 class="text-6xl font-bold text-white">500</h1>
        <h2 class="text-2xl font-semibold text-gray-300">服务器内部错误</h2>
        <p class="text-gray-400 text-lg leading-relaxed">
          抱歉，服务器遇到了一个意外错误。
          <br />
          我们正在努力修复这个问题，请稍后再试。
        </p>
      </div>

      <!-- 建议操作 -->
      <div class="mt-8 space-y-4">
        <div class="flex flex-col sm:flex-row gap-4 justify-center">
          <Button id="refresh-page" variant="outline" size="lg">
            <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
            </svg>
            刷新页面
          </Button>
          <a href="/">
            <Button variant="primary" size="lg">
              <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6"></path>
              </svg>
              回到首页
            </Button>
          </a>
        </div>
      </div>

      <!-- 错误详情 (开发模式) -->
      <div id="error-details" class="hidden mt-8 p-4 bg-gray-800 rounded-lg text-left">
        <h3 class="text-lg font-semibold text-red-400 mb-3">错误详情 (开发模式)</h3>
        <div class="space-y-2 text-sm text-gray-300">
          <div>
            <span class="text-gray-500">时间:</span>
            <span id="error-timestamp"></span>
          </div>
          <div>
            <span class="text-gray-500">URL:</span>
            <span id="error-url" class="break-all"></span>
          </div>
          <div>
            <span class="text-gray-500">用户代理:</span>
            <span id="error-user-agent" class="break-all"></span>
          </div>
          <div>
            <span class="text-gray-500">错误ID:</span>
            <span id="error-id" class="font-mono"></span>
          </div>
        </div>
      </div>

      <!-- 状态检查 -->
      <div class="mt-8 space-y-4">
        <div class="p-4 bg-gray-800 rounded-lg">
          <h3 class="text-lg font-semibold text-white mb-3">系统状态</h3>
          <div class="space-y-2">
            <div class="flex items-center justify-between">
              <span class="text-gray-400">网站状态:</span>
              <div class="flex items-center space-x-2">
                <div id="site-status-indicator" class="w-3 h-3 bg-yellow-500 rounded-full animate-pulse"></div>
                <span id="site-status-text" class="text-sm text-gray-300">检查中...</span>
              </div>
            </div>
            <div class="flex items-center justify-between">
              <span class="text-gray-400">API状态:</span>
              <div class="flex items-center space-x-2">
                <div id="api-status-indicator" class="w-3 h-3 bg-yellow-500 rounded-full animate-pulse"></div>
                <span id="api-status-text" class="text-sm text-gray-300">检查中...</span>
              </div>
            </div>
            <div class="flex items-center justify-between">
              <span class="text-gray-400">数据库状态:</span>
              <div class="flex items-center space-x-2">
                <div id="db-status-indicator" class="w-3 h-3 bg-yellow-500 rounded-full animate-pulse"></div>
                <span id="db-status-text" class="text-sm text-gray-300">检查中...</span>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- 联系支持 -->
      <div class="mt-8 p-4 bg-gray-800 rounded-lg">
        <h3 class="text-lg font-semibold text-white mb-3">需要帮助？</h3>
        <p class="text-gray-400 text-sm mb-4">
          如果问题持续存在，请联系我们的技术支持团队。
        </p>
        <div class="flex flex-col sm:flex-row gap-3">
          <a
            href="/contact"
            class="flex-1 px-4 py-2 bg-primary text-primary-content rounded-md hover:bg-primary/85 transition-colors text-center text-sm font-medium"
          >
            联系支持
          </a>
          <a
            href="/status"
            class="flex-1 px-4 py-2 border border-gray-600 text-gray-300 rounded-md hover:bg-gray-700 transition-colors text-center text-sm font-medium"
          >
            服务状态
          </a>
          <a
            href="https://github.com"
            class="flex-1 px-4 py-2 border border-gray-600 text-gray-300 rounded-md hover:bg-gray-700 transition-colors text-center text-sm font-medium"
          >
            报告问题
          </a>
        </div>
      </div>
    </div>
  </div>
</Layout>

<script>
  // Reason: 为500页面添加状态检查和错误报告功能
  document.addEventListener('DOMContentLoaded', () => {
    const refreshButton = document.getElementById('refresh-page');
    const errorDetails = document.getElementById('error-details');
    const errorTimestamp = document.getElementById('error-timestamp');
    const errorUrl = document.getElementById('error-url');
    const errorUserAgent = document.getElementById('error-user-agent');
    const errorId = document.getElementById('error-id');

    // 刷新页面功能
    refreshButton?.addEventListener('click', () => {
      console.log('用户点击刷新页面');
      window.location.reload();
    });

    // 生成错误ID和显示错误详情
    const generateErrorId = () => {
      return 'ERR-' + Math.random().toString(36).substr(2, 9).toUpperCase();
    };

    const showErrorDetails = () => {
      if (errorTimestamp) errorTimestamp.textContent = new Date().toLocaleString('zh-CN');
      if (errorUrl) errorUrl.textContent = window.location.href;
      if (errorUserAgent) errorUserAgent.textContent = navigator.userAgent;
      if (errorId) errorId.textContent = generateErrorId();
      
      // 在开发环境显示错误详情
      if (window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1') {
        errorDetails?.classList.remove('hidden');
      }
    };

    // 检查系统状态
    const checkSystemStatus = async () => {
      const statusChecks = [
        { 
          name: 'site', 
          endpoint: '/', 
          indicator: document.getElementById('site-status-indicator'),
          text: document.getElementById('site-status-text')
        },
        { 
          name: 'api', 
          endpoint: '/api/health', 
          indicator: document.getElementById('api-status-indicator'),
          text: document.getElementById('api-status-text')
        }
      ];

      for (const check of statusChecks) {
        try {
          console.log(`检查${check.name}状态:`, check.endpoint);
          const response = await fetch(check.endpoint, { 
            method: 'GET',
            cache: 'no-cache'
          });
          
          if (response.ok) {
            check.indicator?.classList.remove('bg-yellow-500', 'bg-red-500', 'animate-pulse');
            check.indicator?.classList.add('bg-green-500');
            if (check.text) check.text.textContent = '正常';
          } else {
            check.indicator?.classList.remove('bg-yellow-500', 'bg-green-500', 'animate-pulse');
            check.indicator?.classList.add('bg-red-500');
            if (check.text) check.text.textContent = '异常';
          }
        } catch (error) {
          console.error(`${check.name}状态检查失败:`, error);
          check.indicator?.classList.remove('bg-yellow-500', 'bg-green-500', 'animate-pulse');
          check.indicator?.classList.add('bg-red-500');
          if (check.text) check.text.textContent = '无法连接';
        }
      }

      // 数据库状态检查
      const dbIndicator = document.getElementById('db-status-indicator');
      const dbText = document.getElementById('db-status-text');
      
      try {
        console.log('检查数据库状态');
        const response = await fetch('/api/auth/me', { 
          method: 'GET',
          cache: 'no-cache'
        });
        
        if (response.ok) {
          dbIndicator?.classList.remove('bg-yellow-500', 'bg-red-500', 'animate-pulse');
          dbIndicator?.classList.add('bg-green-500');
          if (dbText) dbText.textContent = '正常';
        } else {
          dbIndicator?.classList.remove('bg-yellow-500', 'bg-green-500', 'animate-pulse');
          dbIndicator?.classList.add('bg-red-500');
          if (dbText) dbText.textContent = '连接异常';
        }
      } catch (error) {
        console.error('数据库状态检查失败:', error);
        dbIndicator?.classList.remove('bg-yellow-500', 'bg-green-500', 'animate-pulse');
        dbIndicator?.classList.add('bg-red-500');
        if (dbText) dbText.textContent = '无法连接';
      }
    };

    // 记录500错误
    const logError = () => {
      const errorData = {
        type: 'server_error_500',
        url: window.location.href,
        referrer: document.referrer,
        userAgent: navigator.userAgent,
        timestamp: new Date().toISOString(),
        errorId: generateErrorId()
      };

      console.error('500 Server Error:', errorData);

      // 可选：发送错误统计
      if (typeof gtag !== 'undefined') {
        gtag('event', 'server_error', {
          error_type: '500',
          page_location: window.location.href,
          page_referrer: document.referrer
        });
      }
    };

    // 初始化
    showErrorDetails();
    checkSystemStatus();
    logError();

    // 定期检查状态
    setInterval(checkSystemStatus, 30000); // 每30秒检查一次
  });
</script>