---
export interface Props {
  variant?: 'primary' | 'secondary' | 'success' | 'danger' | 'ghost';
  size?: 'sm' | 'md' | 'lg';
  type?: 'button' | 'submit' | 'reset';
  disabled?: boolean;
  loading?: boolean;
  href?: string;
  target?: string;
  class?: string;
  id?: string;
  'aria-label'?: string;
  title?: string;
}

const {
  variant = 'primary',
  size = 'md',
  type = 'button',
  disabled = false,
  loading = false,
  href,
  target,
  class: className = '',
  id,
  'aria-label': ariaLabel,
  title,
  ...rest
} = Astro.props;

// Reason: 根据variant生成对应的样式类
const variantClasses = {
  primary: 'btn-primary',
  secondary: 'btn-secondary',
  success: 'btn-success',
  danger: 'btn-danger',
  ghost: 'btn-ghost'
};

// Reason: 根据size生成对应的样式类
const sizeClasses = {
  sm: 'btn-sm',
  md: '',
  lg: 'btn-lg'
};

// Reason: 组合所有样式类
const buttonClasses = [
  'btn',
  variantClasses[variant],
  sizeClasses[size],
  disabled && 'disabled:opacity-50 disabled:cursor-not-allowed',
  loading && 'relative overflow-hidden',
  className
].filter(Boolean).join(' ');

// Reason: 如果有href属性，渲染为链接
const isLink = Boolean(href);
const Tag = isLink ? 'a' : 'button';

// Reason: 准备传递给元素的属性
const elementProps = {
  class: buttonClasses,
  id,
  'aria-label': ariaLabel,
  title,
  ...(isLink ? {
    href,
    target,
    role: 'button',
    'aria-disabled': disabled ? 'true' : undefined
  } : {
    type,
    disabled: disabled || loading,
    'aria-busy': loading ? 'true' : undefined
  }),
  ...rest
};
---

<Tag {...elementProps}>
  <!-- 加载状态的spinner -->
  {loading && (
    <div class="absolute inset-0 flex items-center justify-center bg-current bg-opacity-20">
      <div class="spinner w-4 h-4 border-white"></div>
    </div>
  )}
  
  <!-- 按钮内容 -->
  <span class={loading ? 'opacity-0' : ''}>
    <slot />
  </span>
</Tag>

<style>
  /* Reason: 确保按钮有正确的过渡效果 */
  .btn {
    position: relative;
    transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
  }
  
  /* Reason: 悬停时的微妙阴影效果 */
  .btn:hover:not(:disabled) {
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
  }
  
  /* Reason: 按下时的反馈效果 */
  .btn:active:not(:disabled) {
    transform: translateY(0);
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }
  
  /* Reason: 确保链接按钮的行为一致 */
  a.btn {
    display: inline-flex;
    text-decoration: none;
  }
  
  a.btn:hover {
    text-decoration: none;
  }
  
  /* Reason: 禁用状态的特殊样式 */
  .btn:disabled,
  .btn[aria-disabled="true"] {
    cursor: not-allowed;
    transform: none !important;
    box-shadow: none !important;
  }
  
  /* Reason: 加载状态的动画 */
  .btn .spinner {
    animation: spin 1s linear infinite;
  }
  
  /* Reason: 确保按钮文字不会换行 */
  .btn {
    white-space: nowrap;
  }
  
  /* Reason: 焦点状态的可访问性样式 */
  .btn:focus-visible {
    outline: 2px solid currentColor;
    outline-offset: 2px;
  }
</style>