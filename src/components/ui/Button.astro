---
export interface Props {
  variant?: 'primary' | 'secondary' | 'outline' | 'ghost' | 'danger';
  size?: 'sm' | 'md' | 'lg';
  type?: 'button' | 'submit' | 'reset';
  disabled?: boolean;
  class?: string;
  id?: string;
  [key: string]: any;
}

const { 
  variant = 'primary', 
  size = 'md', 
  type = 'button',
  disabled = false,
  class: className = '',
  id,
  ...rest 
} = Astro.props;

// Reason: 根据不同变体提供对应的样式类
const variantClasses = {
  primary: 'bg-primary text-primary-content hover:bg-primary/85 focus:ring-primary',
  secondary: 'bg-gray-600 text-white hover:bg-gray-500 focus:ring-gray-500',
  outline: 'border border-primary text-primary bg-transparent hover:bg-primary hover:text-primary-content focus:ring-primary',
  ghost: 'text-primary bg-transparent hover:bg-primary/10 focus:ring-primary',
  danger: 'bg-red-600 text-white hover:bg-red-500 focus:ring-red-500'
};

const sizeClasses = {
  sm: 'px-3 py-1.5 text-sm',
  md: 'px-4 py-2 text-sm',
  lg: 'px-6 py-3 text-base'
};

const baseClasses = 'inline-flex items-center justify-center gap-2 font-medium rounded-md transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-900 disabled:opacity-50 disabled:cursor-not-allowed';

const buttonClasses = [
  baseClasses,
  variantClasses[variant],
  sizeClasses[size],
  className
].filter(Boolean).join(' ');
---

<button
  type={type}
  class={buttonClasses}
  disabled={disabled}
  id={id}
  {...rest}
>
  <slot />
</button>