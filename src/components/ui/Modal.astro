---
export interface Props {
  id: string;
  title?: string;
  size?: 'sm' | 'md' | 'lg' | 'xl' | 'full';
  closeable?: boolean;
  closeOnOverlay?: boolean;
  class?: string;
  contentClass?: string;
}

const {
  id,
  title,
  size = 'md',
  closeable = true,
  closeOnOverlay = true,
  class: className = '',
  contentClass = ''
} = Astro.props;

// Reason: 根据size生成对应的样式类
const sizeClasses = {
  sm: 'max-w-md',
  md: 'max-w-lg',
  lg: 'max-w-2xl',
  xl: 'max-w-4xl',
  full: 'max-w-full mx-4'
};

// Reason: 生成模态框内容的样式类
const modalContentClasses = [
  'modal-content',
  sizeClasses[size],
  contentClass
].filter(Boolean).join(' ');
---

<!-- 模态框背景遮罩 -->
<div
  id={id}
  class={`modal-overlay hidden ${className}`}
  role="dialog"
  aria-modal="true"
  aria-labelledby={title ? `${id}-title` : undefined}
  aria-hidden="true"
>
  <!-- 模态框内容容器 -->
  <div class={modalContentClasses}>
    <!-- 模态框头部 -->
    {(title || closeable) && (
      <div class="card-header flex items-center justify-between">
        {title && (
          <h2 id={`${id}-title`} class="text-lg font-semibold text-gray-900 dark:text-gray-100">
            {title}
          </h2>
        )}
        
        {closeable && (
          <button
            type="button"
            class="modal-close-btn p-2 text-gray-400 hover:text-gray-600 dark:hover:text-gray-200 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors"
            aria-label="关闭模态框"
            title="关闭"
          >
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
            </svg>
          </button>
        )}
      </div>
    )}
    
    <!-- 模态框主体内容 -->
    <div class="card-body">
      <slot />
    </div>
    
    <!-- 模态框底部操作区 -->
    <slot name="footer" />
  </div>
</div>

<script define:vars={{ id, closeOnOverlay, closeable }}>
  // Reason: 模态框控制函数
  window.Modal = window.Modal || {};
  
  window.Modal[id] = {
    // 打开模态框
    open() {
      const modal = document.getElementById(id);
      if (modal) {
        modal.classList.remove('hidden');
        modal.setAttribute('aria-hidden', 'false');
        
        // 聚焦到模态框
        modal.focus();
        
        // 阻止背景滚动
        document.body.style.overflow = 'hidden';
        
        // 添加动画效果
        requestAnimationFrame(() => {
          modal.classList.add('animate-fade-in');
          const content = modal.querySelector('.modal-content');
          content?.classList.add('animate-scale-in');
        });
        
        console.log(`[Modal] 打开模态框: ${id}`);
      }
    },
    
    // 关闭模态框
    close() {
      const modal = document.getElementById(id);
      if (modal) {
        modal.classList.add('hidden');
        modal.setAttribute('aria-hidden', 'true');
        
        // 恢复背景滚动
        document.body.style.overflow = '';
        
        // 移除动画类
        modal.classList.remove('animate-fade-in');
        const content = modal.querySelector('.modal-content');
        content?.classList.remove('animate-scale-in');
        
        console.log(`[Modal] 关闭模态框: ${id}`);
      }
    },
    
    // 切换模态框状态
    toggle() {
      const modal = document.getElementById(id);
      if (modal) {
        if (modal.classList.contains('hidden')) {
          this.open();
        } else {
          this.close();
        }
      }
    }
  };
  
  // Reason: 初始化模态框事件监听器
  document.addEventListener('DOMContentLoaded', () => {
    const modal = document.getElementById(id);
    if (!modal) return;
    
    // 关闭按钮事件
    if (closeable) {
      const closeBtn = modal.querySelector('.modal-close-btn');
      closeBtn?.addEventListener('click', () => {
        window.Modal[id].close();
      });
    }
    
    // 点击遮罩关闭
    if (closeOnOverlay) {
      modal.addEventListener('click', (event) => {
        if (event.target === modal) {
          window.Modal[id].close();
        }
      });
    }
    
    // ESC键关闭
    document.addEventListener('keydown', (event) => {
      if (event.key === 'Escape' && !modal.classList.contains('hidden')) {
        window.Modal[id].close();
      }
    });
    
    // 焦点陷阱 - 确保Tab键只在模态框内循环
    modal.addEventListener('keydown', (event) => {
      if (event.key === 'Tab') {
        const focusableElements = modal.querySelectorAll(
          'button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])'
        );
        const firstElement = focusableElements[0];
        const lastElement = focusableElements[focusableElements.length - 1];
        
        if (event.shiftKey) {
          // Shift + Tab
          if (document.activeElement === firstElement) {
            event.preventDefault();
            lastElement?.focus();
          }
        } else {
          // Tab
          if (document.activeElement === lastElement) {
            event.preventDefault();
            firstElement?.focus();
          }
        }
      }
    });
  });
</script>

<style>
  /* Reason: 模态框背景遮罩样式 */
  .modal-overlay {
    position: fixed;
    inset: 0;
    background-color: rgba(0, 0, 0, 0.5);
    backdrop-filter: blur(4px);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 50;
    padding: 1rem;
  }
  
  /* Reason: 模态框内容样式 */
  .modal-content {
    background: white;
    border-radius: 0.5rem;
    box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
    max-height: 90vh;
    overflow-y: auto;
    width: 100%;
    transform: scale(0.95);
    transition: all 0.2s ease-out;
  }
  
  .dark .modal-content {
    background: #1f2937;
  }
  
  /* Reason: 动画效果 */
  .modal-overlay.animate-fade-in {
    animation: fadeIn 0.2s ease-out;
  }
  
  .modal-content.animate-scale-in {
    transform: scale(1);
  }
  
  /* Reason: 响应式设计 */
  @media (max-width: 640px) {
    .modal-content {
      margin: 0;
      max-height: 100vh;
      border-radius: 0;
    }
    
    .modal-overlay {
      padding: 0;
    }
  }
  
  /* Reason: 滚动条样式 */
  .modal-content::-webkit-scrollbar {
    width: 6px;
  }
  
  .modal-content::-webkit-scrollbar-track {
    background: #f1f5f9;
  }
  
  .modal-content::-webkit-scrollbar-thumb {
    background: #cbd5e1;
    border-radius: 3px;
  }
  
  .dark .modal-content::-webkit-scrollbar-track {
    background: #374151;
  }
  
  .dark .modal-content::-webkit-scrollbar-thumb {
    background: #6b7280;
  }
  
  /* Reason: 确保模态框在其他内容之上 */
  .modal-overlay {
    z-index: 9999;
  }
  
  /* Reason: 聚焦状态的样式 */
  .modal-close-btn:focus-visible {
    outline: 2px solid #3b82f6;
    outline-offset: 2px;
  }
</style>