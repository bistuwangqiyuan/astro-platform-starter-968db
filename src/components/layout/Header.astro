---
import Navigation from './Navigation.astro';

interface Props {
    showNavigation?: boolean;
}

const { showNavigation = true } = Astro.props;
---

<header class="sticky top-0 z-30 w-full border-b border-gray-700/50 bg-complementary/80 backdrop-blur-sm">
    <div class="flex items-center justify-between h-16 px-4 sm:px-6 lg:px-8">
        <!-- Logo and Brand -->
        <div class="flex items-center space-x-4">
            <a href="/" class="flex items-center space-x-2 text-xl font-bold text-white hover:text-primary transition-colors">
                <svg class="w-8 h-8 text-primary" fill="currentColor" viewBox="0 0 24 24">
                    <path d="M3 13h8V3H3v10zm0 8h8v-6H3v6zm10 0h8V11h-8v10zm0-18v6h8V3h-8z"></path>
                </svg>
                <span>数据分析平台</span>
            </a>
        </div>

        <!-- Navigation -->
        {
            showNavigation && (
                <div class="hidden md:block">
                    <Navigation />
                </div>
            )
        }

        <!-- User Actions -->
        <div class="flex items-center space-x-3">
            <!-- Search Button -->
            <button
                type="button"
                class="p-2 text-gray-300 hover:text-white rounded-md hover:bg-gray-700/50 transition-colors"
                aria-label="搜索"
                data-search-toggle
            >
                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                </svg>
            </button>

            <!-- Notifications -->
            <button
                type="button"
                class="relative p-2 text-gray-300 hover:text-white rounded-md hover:bg-gray-700/50 transition-colors"
                aria-label="通知"
                data-notifications-toggle
            >
                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M15 17h5l-5 5-5-5h5m-5-7a5 5 0 1110 0v4.586l1.707 1.707A1 1 0 0120 12H4a1 1 0 01-.293-.707L5.414 9.586V10z"></path>
                </svg>
                <!-- Notification badge -->
                <span class="absolute top-1 right-1 w-2 h-2 bg-red-500 rounded-full"></span>
            </button>

            <!-- User Menu -->
            <div class="relative" data-dropdown="user-menu">
                <button
                    type="button"
                    class="flex items-center space-x-2 p-2 text-gray-300 hover:text-white rounded-md hover:bg-gray-700/50 transition-colors"
                    aria-label="用户菜单"
                    data-dropdown-toggle="user-menu"
                >
                    <div class="w-6 h-6 bg-primary rounded-full flex items-center justify-center text-primary-content text-sm font-medium">U</div>
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                    </svg>
                </button>

                <!-- Dropdown Menu -->
                <div
                    class="absolute right-0 mt-2 w-48 bg-white rounded-md shadow-lg ring-1 ring-black ring-opacity-5 hidden"
                    data-dropdown-menu="user-menu"
                    role="menu"
                >
                    <div class="py-1">
                        <a href="/profile" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100" role="menuitem"> 个人资料 </a>
                        <a href="/favorites" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100" role="menuitem"> 我的收藏 </a>
                        <a href="/history" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100" role="menuitem"> 历史记录 </a>
                        <div class="border-t border-gray-100"></div>
                        <button type="button" class="block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100" data-logout> 退出登录 </button>
                    </div>
                </div>
            </div>

            <!-- Mobile Menu Toggle -->
            {
                showNavigation && (
                    <button
                        type="button"
                        class="md:hidden p-2 text-gray-300 hover:text-white rounded-md hover:bg-gray-700/50 transition-colors"
                        aria-label="菜单"
                        data-mobile-menu-toggle
                    >
                        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
                        </svg>
                    </button>
                )
            }
        </div>
    </div>

    <!-- Mobile Navigation -->
    {
        showNavigation && (
            <div class="md:hidden border-t border-gray-700/50 hidden" data-mobile-menu>
                <div class="px-4 py-3">
                    <Navigation mobile={true} />
                </div>
            </div>
        )
    }
</header>

<!-- Search Modal -->
<div id="search-modal" class="fixed inset-0 z-50 hidden items-center justify-center bg-black/50 backdrop-blur-sm" data-modal="search">
    <div class="bg-white rounded-lg shadow-xl w-full max-w-2xl mx-4">
        <div class="p-6">
            <div class="flex items-center justify-between mb-4">
                <h3 class="text-lg font-semibold text-gray-900">搜索</h3>
                <button type="button" class="text-gray-400 hover:text-gray-600" data-modal-close="search">
                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                    </svg>
                </button>
            </div>

            <div class="relative">
                <input
                    type="text"
                    placeholder="搜索分析、报告、数据集..."
                    class="w-full px-4 py-3 pl-10 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent"
                    data-search-input
                />
                <svg class="absolute left-3 top-3.5 w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                </svg>
            </div>

            <div class="mt-4 text-sm text-gray-500">
                <p>提示: 使用 <kbd class="px-2 py-1 bg-gray-100 rounded text-xs">Ctrl+K</kbd> 快速打开搜索</p>
            </div>
        </div>
    </div>
</div>

<script>
    class HeaderManager {
        constructor() {
            this.init();
        }

        init() {
            this.setupDropdowns();
            this.setupMobileMenu();
            this.setupSearch();
            this.setupUserActions();
        }

        setupDropdowns() {
            document.addEventListener('click', (e) => {
                // Toggle dropdown
                const toggle = e.target.closest('[data-dropdown-toggle]');
                if (toggle) {
                    const menuId = toggle.getAttribute('data-dropdown-toggle');
                    const menu = document.querySelector(`[data-dropdown-menu="${menuId}"]`);

                    if (menu) {
                        // Close other dropdowns
                        document.querySelectorAll('[data-dropdown-menu]').forEach((m) => {
                            if (m !== menu) m.classList.add('hidden');
                        });

                        // Toggle current dropdown
                        menu.classList.toggle('hidden');
                    }
                    return;
                }

                // Close dropdowns when clicking outside
                if (!e.target.closest('[data-dropdown]')) {
                    document.querySelectorAll('[data-dropdown-menu]').forEach((menu) => {
                        menu.classList.add('hidden');
                    });
                }
            });
        }

        setupMobileMenu() {
            const toggle = document.querySelector('[data-mobile-menu-toggle]');
            const menu = document.querySelector('[data-mobile-menu]');

            if (toggle && menu) {
                toggle.addEventListener('click', () => {
                    menu.classList.toggle('hidden');
                });
            }
        }

        setupSearch() {
            const searchToggle = document.querySelector('[data-search-toggle]');
            const searchModal = document.getElementById('search-modal');
            const searchInput = document.querySelector('[data-search-input]');
            const modalClose = document.querySelector('[data-modal-close="search"]');

            // Open search modal
            const openSearch = () => {
                if (searchModal) {
                    searchModal.classList.remove('hidden');
                    searchModal.classList.add('flex');
                    if (searchInput) {
                        setTimeout(() => searchInput.focus(), 100);
                    }
                }
            };

            // Close search modal
            const closeSearch = () => {
                if (searchModal) {
                    searchModal.classList.add('hidden');
                    searchModal.classList.remove('flex');
                }
            };

            // Event listeners
            if (searchToggle) {
                searchToggle.addEventListener('click', openSearch);
            }

            if (modalClose) {
                modalClose.addEventListener('click', closeSearch);
            }

            // Close on backdrop click
            if (searchModal) {
                searchModal.addEventListener('click', (e) => {
                    if (e.target === searchModal) {
                        closeSearch();
                    }
                });
            }

            // Global keyboard shortcut
            document.addEventListener('keydown', (e) => {
                if ((e.ctrlKey || e.metaKey) && e.key === 'k') {
                    e.preventDefault();
                    openSearch();
                }

                if (e.key === 'Escape') {
                    closeSearch();
                }
            });

            // Search functionality
            if (searchInput) {
                const debouncedSearch = this.debounce((query) => {
                    this.performSearch(query);
                }, 300);

                searchInput.addEventListener('input', (e) => {
                    debouncedSearch(e.target.value);
                });
            }
        }

        setupUserActions() {
            // Logout functionality
            const logoutBtn = document.querySelector('[data-logout]');
            if (logoutBtn) {
                logoutBtn.addEventListener('click', this.handleLogout);
            }

            // Notifications
            const notificationsToggle = document.querySelector('[data-notifications-toggle]');
            if (notificationsToggle) {
                notificationsToggle.addEventListener('click', this.handleNotifications);
            }
        }

        async performSearch(query) {
            if (!query.trim()) return;

            try {
                // 实现搜索逻辑
                console.log('Searching for:', query);

                // 这里可以调用搜索API
                // const results = await window.Utils.apiRequest('/api/search', {
                //     method: 'POST',
                //     body: { query }
                // });
            } catch (error) {
                console.error('Search error:', error);
                if (window.Utils) {
                    window.Utils.showAlert('搜索失败，请重试', 'error');
                }
            }
        }

        async handleLogout() {
            try {
                if (window.Utils) {
                    window.Utils.showLoading();
                }

                // 调用登出API
                await window.Utils.apiRequest('/api/auth/logout', {
                    method: 'POST'
                });

                // 清除本地存储
                localStorage.clear();
                sessionStorage.clear();

                // 重定向到登录页
                window.location.href = '/auth/login';
            } catch (error) {
                console.error('Logout error:', error);
                if (window.Utils) {
                    window.Utils.hideLoading();
                    window.Utils.showAlert('登出失败，请重试', 'error');
                }
            }
        }

        handleNotifications() {
            // 实现通知逻辑
            console.log('Opening notifications');

            if (window.Utils) {
                window.Utils.showAlert('通知功能正在开发中', 'info');
            }
        }

        debounce(func, wait) {
            let timeout;
            return function executedFunction(...args) {
                const later = () => {
                    clearTimeout(timeout);
                    func(...args);
                };
                clearTimeout(timeout);
                timeout = setTimeout(later, wait);
            };
        }
    }

    // Initialize header when DOM is ready
    document.addEventListener('DOMContentLoaded', () => {
        new HeaderManager();
    });

    // Initialize immediately if DOM is already loaded
    if (document.readyState !== 'loading') {
        new HeaderManager();
    }
</script>
